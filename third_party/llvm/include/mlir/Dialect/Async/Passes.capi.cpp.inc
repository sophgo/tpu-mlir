/* Autogenerated by mlir-tblgen; don't manually edit. */
//===----------------------------------------------------------------------===//
// Async Group Registration
//===----------------------------------------------------------------------===//

void mlirRegisterAsyncPasses() {
  registerAsyncPasses();
}

MlirPass mlirCreateAsyncAsyncParallelFor() {
  return wrap(mlir::createAsyncParallelForPass().release());
}
void mlirRegisterAsyncAsyncParallelFor() {
  registerAsyncParallelFor();
}


MlirPass mlirCreateAsyncAsyncRuntimePolicyBasedRefCounting() {
  return wrap(mlir::createAsyncRuntimePolicyBasedRefCountingPass().release());
}
void mlirRegisterAsyncAsyncRuntimePolicyBasedRefCounting() {
  registerAsyncRuntimePolicyBasedRefCounting();
}


MlirPass mlirCreateAsyncAsyncRuntimeRefCounting() {
  return wrap(mlir::createAsyncRuntimeRefCountingPass().release());
}
void mlirRegisterAsyncAsyncRuntimeRefCounting() {
  registerAsyncRuntimeRefCounting();
}


MlirPass mlirCreateAsyncAsyncRuntimeRefCountingOpt() {
  return wrap(mlir::createAsyncRuntimeRefCountingOptPass().release());
}
void mlirRegisterAsyncAsyncRuntimeRefCountingOpt() {
  registerAsyncRuntimeRefCountingOpt();
}


MlirPass mlirCreateAsyncAsyncToAsyncRuntime() {
  return wrap(mlir::createAsyncToAsyncRuntimePass().release());
}
void mlirRegisterAsyncAsyncToAsyncRuntime() {
  registerAsyncToAsyncRuntime();
}

