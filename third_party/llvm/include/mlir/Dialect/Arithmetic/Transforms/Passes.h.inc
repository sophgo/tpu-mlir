/* Autogenerated by mlir-tblgen; don't manually edit */

//===----------------------------------------------------------------------===//
// ArithmeticBufferize
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_ARITHMETICBUFFERIZE
struct ArithmeticBufferizeOptions {
  unsigned alignment = 0;
};
#undef GEN_PASS_DECL_ARITHMETICBUFFERIZE
#endif // GEN_PASS_DECL_ARITHMETICBUFFERIZE
#ifdef GEN_PASS_DEF_ARITHMETICBUFFERIZE
namespace impl {

template <typename DerivedT>
class ArithmeticBufferizeBase : public ::mlir::OperationPass<ModuleOp> {
public:
  using Base = ArithmeticBufferizeBase;

  ArithmeticBufferizeBase() : ::mlir::OperationPass<ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  ArithmeticBufferizeBase(const ArithmeticBufferizeBase &other) : ::mlir::OperationPass<ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("arith-bufferize");
  }
  ::llvm::StringRef getArgument() const override { return "arith-bufferize"; }

  ::llvm::StringRef getDescription() const override { return "Bufferize Arithmetic dialect ops."; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("ArithmeticBufferize");
  }
  ::llvm::StringRef getName() const override { return "ArithmeticBufferize"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(ArithmeticBufferizeBase<DerivedT>)

  ArithmeticBufferizeBase(const ArithmeticBufferizeOptions &options) : ArithmeticBufferizeBase() {
    alignment = options.alignment;
  }
protected:
  ::mlir::Pass::Option<unsigned> alignment{*this, "alignment", ::llvm::cl::desc("Create global memrefs with a specified alignment"), ::llvm::cl::init(0)};
private:
};
} // namespace impl
#undef GEN_PASS_DEF_ARITHMETICBUFFERIZE
#endif // GEN_PASS_DEF_ARITHMETICBUFFERIZE

//===----------------------------------------------------------------------===//
// ArithmeticEmulateWideInt
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_ARITHMETICEMULATEWIDEINT
struct ArithmeticEmulateWideIntOptions {
  unsigned widestIntSupported = 32;
};
std::unique_ptr<::mlir::Pass> createArithmeticEmulateWideInt();
std::unique_ptr<::mlir::Pass> createArithmeticEmulateWideInt(const ArithmeticEmulateWideIntOptions &options);
#undef GEN_PASS_DECL_ARITHMETICEMULATEWIDEINT
#endif // GEN_PASS_DECL_ARITHMETICEMULATEWIDEINT
#ifdef GEN_PASS_DEF_ARITHMETICEMULATEWIDEINT

namespace impl {
  std::unique_ptr<::mlir::Pass> createArithmeticEmulateWideInt();
} // namespace impl

namespace impl {
  std::unique_ptr<::mlir::Pass> createArithmeticEmulateWideInt(const ArithmeticEmulateWideIntOptions &options);
} // namespace impl
namespace impl {

template <typename DerivedT>
class ArithmeticEmulateWideIntBase : public ::mlir::OperationPass<> {
public:
  using Base = ArithmeticEmulateWideIntBase;

  ArithmeticEmulateWideIntBase() : ::mlir::OperationPass<>(::mlir::TypeID::get<DerivedT>()) {}
  ArithmeticEmulateWideIntBase(const ArithmeticEmulateWideIntBase &other) : ::mlir::OperationPass<>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("arith-emulate-wide-int");
  }
  ::llvm::StringRef getArgument() const override { return "arith-emulate-wide-int"; }

  ::llvm::StringRef getDescription() const override { return "Emulate 2*N-bit integer operations using N-bit operations"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("ArithmeticEmulateWideInt");
  }
  ::llvm::StringRef getName() const override { return "ArithmeticEmulateWideInt"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  registry.insert<vector::VectorDialect>();

  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(ArithmeticEmulateWideIntBase<DerivedT>)

  ArithmeticEmulateWideIntBase(const ArithmeticEmulateWideIntOptions &options) : ArithmeticEmulateWideIntBase() {
    widestIntSupported = options.widestIntSupported;
  }
protected:
  ::mlir::Pass::Option<unsigned> widestIntSupported{*this, "widest-int-supported", ::llvm::cl::desc("Widest integer type supported by the target"), ::llvm::cl::init(32)};
private:

  friend std::unique_ptr<::mlir::Pass> createArithmeticEmulateWideInt() {
    return std::make_unique<DerivedT>();
  }

  friend std::unique_ptr<::mlir::Pass> createArithmeticEmulateWideInt(const ArithmeticEmulateWideIntOptions &options) {
    return std::make_unique<DerivedT>(options);
  }
};
} // namespace impl

std::unique_ptr<::mlir::Pass> createArithmeticEmulateWideInt() {
  return impl::createArithmeticEmulateWideInt();
}

std::unique_ptr<::mlir::Pass> createArithmeticEmulateWideInt(const ArithmeticEmulateWideIntOptions &options) {
  return impl::createArithmeticEmulateWideInt(options);
}
#undef GEN_PASS_DEF_ARITHMETICEMULATEWIDEINT
#endif // GEN_PASS_DEF_ARITHMETICEMULATEWIDEINT

//===----------------------------------------------------------------------===//
// ArithmeticExpandOps
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_ARITHMETICEXPANDOPS
#undef GEN_PASS_DECL_ARITHMETICEXPANDOPS
#endif // GEN_PASS_DECL_ARITHMETICEXPANDOPS
#ifdef GEN_PASS_DEF_ARITHMETICEXPANDOPS
namespace impl {

template <typename DerivedT>
class ArithmeticExpandOpsBase : public ::mlir::OperationPass<> {
public:
  using Base = ArithmeticExpandOpsBase;

  ArithmeticExpandOpsBase() : ::mlir::OperationPass<>(::mlir::TypeID::get<DerivedT>()) {}
  ArithmeticExpandOpsBase(const ArithmeticExpandOpsBase &other) : ::mlir::OperationPass<>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("arith-expand");
  }
  ::llvm::StringRef getArgument() const override { return "arith-expand"; }

  ::llvm::StringRef getDescription() const override { return "Legalize Arithmetic ops to be convertible to LLVM."; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("ArithmeticExpandOps");
  }
  ::llvm::StringRef getName() const override { return "ArithmeticExpandOps"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(ArithmeticExpandOpsBase<DerivedT>)

protected:
private:
};
} // namespace impl
#undef GEN_PASS_DEF_ARITHMETICEXPANDOPS
#endif // GEN_PASS_DEF_ARITHMETICEXPANDOPS

//===----------------------------------------------------------------------===//
// ArithmeticUnsignedWhenEquivalent
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_ARITHMETICUNSIGNEDWHENEQUIVALENT
#undef GEN_PASS_DECL_ARITHMETICUNSIGNEDWHENEQUIVALENT
#endif // GEN_PASS_DECL_ARITHMETICUNSIGNEDWHENEQUIVALENT
#ifdef GEN_PASS_DEF_ARITHMETICUNSIGNEDWHENEQUIVALENT
namespace impl {

template <typename DerivedT>
class ArithmeticUnsignedWhenEquivalentBase : public ::mlir::OperationPass<> {
public:
  using Base = ArithmeticUnsignedWhenEquivalentBase;

  ArithmeticUnsignedWhenEquivalentBase() : ::mlir::OperationPass<>(::mlir::TypeID::get<DerivedT>()) {}
  ArithmeticUnsignedWhenEquivalentBase(const ArithmeticUnsignedWhenEquivalentBase &other) : ::mlir::OperationPass<>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("arith-unsigned-when-equivalent");
  }
  ::llvm::StringRef getArgument() const override { return "arith-unsigned-when-equivalent"; }

  ::llvm::StringRef getDescription() const override { return "Replace signed ops with unsigned ones where they are proven equivalent"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("ArithmeticUnsignedWhenEquivalent");
  }
  ::llvm::StringRef getName() const override { return "ArithmeticUnsignedWhenEquivalent"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(ArithmeticUnsignedWhenEquivalentBase<DerivedT>)

protected:
private:
};
} // namespace impl
#undef GEN_PASS_DEF_ARITHMETICUNSIGNEDWHENEQUIVALENT
#endif // GEN_PASS_DEF_ARITHMETICUNSIGNEDWHENEQUIVALENT
#ifdef GEN_PASS_REGISTRATION

//===----------------------------------------------------------------------===//
// ArithmeticBufferize Registration
//===----------------------------------------------------------------------===//

inline void registerArithmeticBufferize() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::arith::createArithmeticBufferizePass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerArithmeticBufferizePass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::arith::createArithmeticBufferizePass();
  });
}

//===----------------------------------------------------------------------===//
// ArithmeticEmulateWideInt Registration
//===----------------------------------------------------------------------===//

inline void registerArithmeticEmulateWideInt() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createArithmeticEmulateWideInt();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerArithmeticEmulateWideIntPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return createArithmeticEmulateWideInt();
  });
}

//===----------------------------------------------------------------------===//
// ArithmeticExpandOps Registration
//===----------------------------------------------------------------------===//

inline void registerArithmeticExpandOps() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::arith::createArithmeticExpandOpsPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerArithmeticExpandOpsPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::arith::createArithmeticExpandOpsPass();
  });
}

//===----------------------------------------------------------------------===//
// ArithmeticUnsignedWhenEquivalent Registration
//===----------------------------------------------------------------------===//

inline void registerArithmeticUnsignedWhenEquivalent() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::arith::createArithmeticUnsignedWhenEquivalentPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerArithmeticUnsignedWhenEquivalentPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::arith::createArithmeticUnsignedWhenEquivalentPass();
  });
}

//===----------------------------------------------------------------------===//
// Arithmetic Registration
//===----------------------------------------------------------------------===//

inline void registerArithmeticPasses() {
  registerArithmeticBufferize();
  registerArithmeticEmulateWideInt();
  registerArithmeticExpandOps();
  registerArithmeticUnsignedWhenEquivalent();
}
#undef GEN_PASS_REGISTRATION
#endif // GEN_PASS_REGISTRATION
// Deprecated. Please use the new per-pass macros.
#ifdef GEN_PASS_CLASSES

template <typename DerivedT>
class ArithmeticBufferizeBase : public ::mlir::OperationPass<ModuleOp> {
public:
  using Base = ArithmeticBufferizeBase;

  ArithmeticBufferizeBase() : ::mlir::OperationPass<ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  ArithmeticBufferizeBase(const ArithmeticBufferizeBase &other) : ::mlir::OperationPass<ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("arith-bufferize");
  }
  ::llvm::StringRef getArgument() const override { return "arith-bufferize"; }

  ::llvm::StringRef getDescription() const override { return "Bufferize Arithmetic dialect ops."; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("ArithmeticBufferize");
  }
  ::llvm::StringRef getName() const override { return "ArithmeticBufferize"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(ArithmeticBufferizeBase<DerivedT>)

protected:
  ::mlir::Pass::Option<unsigned> alignment{*this, "alignment", ::llvm::cl::desc("Create global memrefs with a specified alignment"), ::llvm::cl::init(0)};
};

template <typename DerivedT>
class ArithmeticEmulateWideIntBase : public ::mlir::OperationPass<> {
public:
  using Base = ArithmeticEmulateWideIntBase;

  ArithmeticEmulateWideIntBase() : ::mlir::OperationPass<>(::mlir::TypeID::get<DerivedT>()) {}
  ArithmeticEmulateWideIntBase(const ArithmeticEmulateWideIntBase &other) : ::mlir::OperationPass<>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("arith-emulate-wide-int");
  }
  ::llvm::StringRef getArgument() const override { return "arith-emulate-wide-int"; }

  ::llvm::StringRef getDescription() const override { return "Emulate 2*N-bit integer operations using N-bit operations"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("ArithmeticEmulateWideInt");
  }
  ::llvm::StringRef getName() const override { return "ArithmeticEmulateWideInt"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  registry.insert<vector::VectorDialect>();

  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(ArithmeticEmulateWideIntBase<DerivedT>)

protected:
  ::mlir::Pass::Option<unsigned> widestIntSupported{*this, "widest-int-supported", ::llvm::cl::desc("Widest integer type supported by the target"), ::llvm::cl::init(32)};
};

template <typename DerivedT>
class ArithmeticExpandOpsBase : public ::mlir::OperationPass<> {
public:
  using Base = ArithmeticExpandOpsBase;

  ArithmeticExpandOpsBase() : ::mlir::OperationPass<>(::mlir::TypeID::get<DerivedT>()) {}
  ArithmeticExpandOpsBase(const ArithmeticExpandOpsBase &other) : ::mlir::OperationPass<>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("arith-expand");
  }
  ::llvm::StringRef getArgument() const override { return "arith-expand"; }

  ::llvm::StringRef getDescription() const override { return "Legalize Arithmetic ops to be convertible to LLVM."; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("ArithmeticExpandOps");
  }
  ::llvm::StringRef getName() const override { return "ArithmeticExpandOps"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(ArithmeticExpandOpsBase<DerivedT>)

protected:
};

template <typename DerivedT>
class ArithmeticUnsignedWhenEquivalentBase : public ::mlir::OperationPass<> {
public:
  using Base = ArithmeticUnsignedWhenEquivalentBase;

  ArithmeticUnsignedWhenEquivalentBase() : ::mlir::OperationPass<>(::mlir::TypeID::get<DerivedT>()) {}
  ArithmeticUnsignedWhenEquivalentBase(const ArithmeticUnsignedWhenEquivalentBase &other) : ::mlir::OperationPass<>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("arith-unsigned-when-equivalent");
  }
  ::llvm::StringRef getArgument() const override { return "arith-unsigned-when-equivalent"; }

  ::llvm::StringRef getDescription() const override { return "Replace signed ops with unsigned ones where they are proven equivalent"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("ArithmeticUnsignedWhenEquivalent");
  }
  ::llvm::StringRef getName() const override { return "ArithmeticUnsignedWhenEquivalent"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(ArithmeticUnsignedWhenEquivalentBase<DerivedT>)

protected:
};
#undef GEN_PASS_CLASSES
#endif // GEN_PASS_CLASSES
