From 45a52d64239896df47f9ffb9bebd5af354332290 Mon Sep 17 00:00:00 2001
From: "pengchao.hu" <pengchao.hu@sophgo.com>
Date: Sat, 4 Jun 2022 13:15:23 +0800
Subject: [PATCH] ajust for tpu-mlir

---
 mlir/CMakeLists.txt                           |   6 +-
 mlir/include/mlir/Conversion/Passes.td        | 302 ----------------
 mlir/include/mlir/Dialect/CMakeLists.txt      |  16 +-
 mlir/include/mlir/InitAllDialects.h           |  57 +--
 mlir/include/mlir/InitAllPasses.h             |   8 +-
 mlir/include/mlir/Target/LLVMIR/Dialect/All.h |  18 +-
 .../Bindings/Python/RegisterEverything.cpp    |   5 -
 mlir/lib/CAPI/Dialect/CMakeLists.txt          | 107 ------
 .../CAPI/RegisterEverything/CMakeLists.txt    |   1 -
 .../RegisterEverything/RegisterEverything.cpp |   2 +-
 mlir/lib/Conversion/CMakeLists.txt            |  30 +-
 .../Conversion/VectorToLLVM/CMakeLists.txt    |   8 -
 .../VectorToLLVM/ConvertVectorToLLVMPass.cpp  |  26 --
 mlir/lib/Dialect/CMakeLists.txt               |  16 +-
 .../Dialect/Linalg/Transforms/CMakeLists.txt  |   1 -
 .../Transforms/LinalgStrategyPasses.cpp       |  14 +-
 .../Dialect/Math/Transforms/CMakeLists.txt    |   3 +-
 .../X86Vector/Transforms/CMakeLists.txt       |   1 -
 mlir/lib/IR/Verifier.cpp                      |   5 -
 mlir/lib/Target/LLVMIR/CMakeLists.txt         |  13 +-
 mlir/lib/Target/LLVMIR/Dialect/CMakeLists.txt |  16 +-
 .../LLVMIR/Dialect/X86Vector/CMakeLists.txt   |   1 -
 mlir/python/CMakeLists.txt                    | 326 ------------------
 mlir/test/lib/Dialect/Math/CMakeLists.txt     |   1 -
 24 files changed, 69 insertions(+), 914 deletions(-)

diff --git a/mlir/CMakeLists.txt b/mlir/CMakeLists.txt
index ac98cc290a0b..686732de9b4f 100644
--- a/mlir/CMakeLists.txt
+++ b/mlir/CMakeLists.txt
@@ -87,11 +87,7 @@ add_dependencies(mlir-headers mlir-generic-headers)
 add_custom_target(mlir-doc)
 
 # Only enable execution engine if the native target is available.
-if(${LLVM_NATIVE_ARCH} IN_LIST LLVM_TARGETS_TO_BUILD)
-  set(MLIR_ENABLE_EXECUTION_ENGINE 1)
-else()
-  set(MLIR_ENABLE_EXECUTION_ENGINE 0)
-endif()
+set(MLIR_ENABLE_EXECUTION_ENGINE 0)
 
 # Build the CUDA conversions and run according tests if the NVPTX backend
 # is available
diff --git a/mlir/include/mlir/Conversion/Passes.td b/mlir/include/mlir/Conversion/Passes.td
index 6163c6ae5d0c..df8d6dec5f45 100644
--- a/mlir/include/mlir/Conversion/Passes.td
+++ b/mlir/include/mlir/Conversion/Passes.td
@@ -73,25 +73,6 @@ def ConvertAffineToStandard : Pass<"lower-affine"> {
   ];
 }
 
-//===----------------------------------------------------------------------===//
-// AMDGPUToROCDL
-//===----------------------------------------------------------------------===//
-
-def ConvertAMDGPUToROCDL : Pass<"convert-amdgpu-to-rocdl"> {
-  let summary = "Convert AMDGPU dialect to ROCDL dialect";
-  let description = [{
-    This pass converts supported AMDGPU ops to ROCDL dialect intrinsics.
-  }];
-  let constructor = "mlir::createConvertAMDGPUToROCDLPass()";
-  let dependentDialects = [
-    "LLVM::LLVMDialect",
-    "ROCDL::ROCDLDialect",
-  ];
-  let options = [Option<"chipset", "chipset", "std::string",
-                        /*default=*/"\"gfx000\"",
-                        "Chipset that these operations will run on">];
-}
-
 //===----------------------------------------------------------------------===//
 // ArithmeticToLLVM
 //===----------------------------------------------------------------------===//
@@ -130,16 +111,6 @@ def ConvertArithmeticToSPIRV : Pass<"convert-arith-to-spirv"> {
   ];
 }
 
-//===----------------------------------------------------------------------===//
-// ArmNeon2dToIntr
-//===----------------------------------------------------------------------===//
-
-def ConvertArmNeon2dToIntr : Pass<"arm-neon-2d-to-intr"> {
-  let summary = "Convert Arm NEON structured ops to intrinsics";
-  let constructor = "mlir::createConvertArmNeon2dToIntrPass()";
-  let dependentDialects = ["arm_neon::ArmNeonDialect", "vector::VectorDialect"];
-}
-
 //===----------------------------------------------------------------------===//
 // AsyncToLLVM
 //===----------------------------------------------------------------------===//
@@ -328,118 +299,6 @@ def ConvertFuncToSPIRV : Pass<"convert-func-to-spirv"> {
   ];
 }
 
-//===----------------------------------------------------------------------===//
-// GPUCommon
-//===----------------------------------------------------------------------===//
-
-def GpuToLLVMConversionPass : Pass<"gpu-to-llvm", "ModuleOp"> {
-  let summary = "Convert GPU dialect to LLVM dialect with GPU runtime calls";
-  let constructor = "mlir::createGpuToLLVMConversionPass()";
-  let dependentDialects = ["LLVM::LLVMDialect"];
-}
-
-def LowerHostCodeToLLVM : Pass<"lower-host-to-llvm", "ModuleOp"> {
-  let summary = "Lowers the host module code and `gpu.launch_func` to LLVM";
-  let constructor = "mlir::createLowerHostCodeToLLVMPass()";
-  let dependentDialects = ["LLVM::LLVMDialect"];
-}
-
-//===----------------------------------------------------------------------===//
-// GPUToNVVM
-//===----------------------------------------------------------------------===//
-
-def ConvertGpuOpsToNVVMOps : Pass<"convert-gpu-to-nvvm", "gpu::GPUModuleOp"> {
-  let summary = "Generate NVVM operations for gpu operations";
-  let constructor = "mlir::createLowerGpuOpsToNVVMOpsPass()";
-  let dependentDialects = [
-    "cf::ControlFlowDialect",
-    "memref::MemRefDialect",
-    "NVVM::NVVMDialect",
-  ];
-  let options = [
-    Option<"indexBitwidth", "index-bitwidth", "unsigned",
-           /*default=kDeriveIndexBitwidthFromDataLayout*/"0",
-           "Bitwidth of the index type, 0 to use size of machine word">
-  ];
-}
-
-//===----------------------------------------------------------------------===//
-// GPUToROCDL
-//===----------------------------------------------------------------------===//
-
-def ConvertGpuOpsToROCDLOps : Pass<"convert-gpu-to-rocdl", "gpu::GPUModuleOp"> {
-  let summary = "Generate ROCDL operations for gpu operations";
-  let constructor = "mlir::createLowerGpuOpsToROCDLOpsPass()";
-  let dependentDialects = ["ROCDL::ROCDLDialect"];
-  let options = [
-    Option<"chipset", "chipset", "std::string",
-           /*default=*/"\"gfx000\"",
-           "Chipset that these operations will run on">,
-    Option<"indexBitwidth", "index-bitwidth", "unsigned",
-           /*default=kDeriveIndexBitwidthFromDataLayout*/"0",
-           "Bitwidth of the index type, 0 to use size of machine word">,
-    Option<"useBarePtrCallConv", "use-bare-ptr-memref-call-conv", "bool",
-           /*default=*/"false",
-           "Replace memref arguments in GPU functions with bare pointers."
-           "All memrefs must have static shape">,
-    Option<"runtime", "runtime", "::mlir::gpu::amd::Runtime",
-          "::mlir::gpu::amd::Runtime::Unknown",
-          "Runtime code will be run on (default is Unknown, can also use HIP or OpenCl)",
-          [{::llvm::cl::values(
-            clEnumValN(::mlir::gpu::amd::Runtime::Unknown, "unknown", "Unknown (default)"),
-            clEnumValN(::mlir::gpu::amd::Runtime::HIP, "HIP", "HIP"),
-            clEnumValN(::mlir::gpu::amd::Runtime::OpenCL, "OpenCL", "OpenCL")
-          )}]>
-  ];
-}
-
-//===----------------------------------------------------------------------===//
-// GPUToSPIRV
-//===----------------------------------------------------------------------===//
-
-def ConvertGPUToSPIRV : Pass<"convert-gpu-to-spirv", "ModuleOp"> {
-  let summary = "Convert GPU dialect to SPIR-V dialect";
-  let description = [{
-    This pass converts supported GPU device ops to SPIR-V ops. It does not
-    handle GPU host ops.
-
-    A `gpu.func` op can have parameters to pass in resources. But in SPIR-V
-    entry functions cannot take parameters; they use descriptors to access
-    resources. By default, parameters to a `gpu.func` op will be converted to
-    global variables. These global variables will be assigned sequential binding
-    numbers following their order in the original `gpu.func` op, starting from
-    0, in set 0. One can attach `spv.interface_var_abi` to those parameters
-    to control the set and binding if wanted.
-  }];
-  let constructor = "mlir::createConvertGPUToSPIRVPass()";
-  let dependentDialects = ["spirv::SPIRVDialect"];
-}
-
-//===----------------------------------------------------------------------===//
-// GPUToVulkan
-//===----------------------------------------------------------------------===//
-
-def ConvertGpuLaunchFuncToVulkanLaunchFunc
-    : Pass<"convert-gpu-launch-to-vulkan-launch", "ModuleOp"> {
-  let summary = "Convert gpu.launch_func to vulkanLaunch external call";
-  let description = [{
-    This pass is only intended for the mlir-vulkan-runner.
-  }];
-  let constructor = "mlir::createConvertGpuLaunchFuncToVulkanLaunchFuncPass()";
-  let dependentDialects = ["spirv::SPIRVDialect"];
-}
-
-def ConvertVulkanLaunchFuncToVulkanCalls
-    : Pass<"launch-func-to-vulkan", "ModuleOp"> {
-  let summary = "Convert vulkanLaunch external call to Vulkan runtime external "
-                "calls";
-  let description = [{
-    This pass is only intended for the mlir-vulkan-runner.
-  }];
-  let constructor = "mlir::createConvertVulkanLaunchFuncToVulkanCallsPass()";
-  let dependentDialects = ["LLVM::LLVMDialect"];
-}
-
 //===----------------------------------------------------------------------===//
 // LinalgToLLVM
 //===----------------------------------------------------------------------===//
@@ -585,22 +444,6 @@ def ConvertMemRefToSPIRV : Pass<"convert-memref-to-spirv"> {
   ];
 }
 
-//===----------------------------------------------------------------------===//
-// NVGPUToNVVM
-//===----------------------------------------------------------------------===//
-
-def ConvertNVGPUToNVVM : Pass<"convert-nvgpu-to-nvvm"> {
-  let summary = "Convert NVGPU dialect to NVVM dialect";
-  let description = [{
-    This pass converts supported NVGPU ops to NVVM dialect intrinsics.
-  }];
-  let constructor = "mlir::createConvertNVGPUToNVVMPass()";
-  let dependentDialects = [
-    "NVVM::NVVMDialect",
-  ];
-}
-
-
 //===----------------------------------------------------------------------===//
 // OpenACCToSCF
 //===----------------------------------------------------------------------===//
@@ -707,29 +550,6 @@ def SCFToSPIRV : Pass<"convert-scf-to-spirv"> {
   let dependentDialects = ["spirv::SPIRVDialect"];
 }
 
-//===----------------------------------------------------------------------===//
-// SCFToGPU
-//===----------------------------------------------------------------------===//
-
-def ConvertAffineForToGPU
-    : InterfacePass<"convert-affine-for-to-gpu", "FunctionOpInterface"> {
-  let summary = "Convert top-level AffineFor Ops to GPU kernels";
-  let constructor = "mlir::createAffineForToGPUPass()";
-  let dependentDialects = ["gpu::GPUDialect"];
-  let options = [
-    Option<"numBlockDims", "gpu-block-dims", "unsigned", /*default=*/"1u",
-           "Number of GPU block dimensions for mapping">,
-    Option<"numThreadDims", "gpu-thread-dims", "unsigned", /*default=*/"1u",
-           "Number of GPU thread dimensions for mapping">
-  ];
-}
-
-def ConvertParallelLoopToGpu : Pass<"convert-parallel-loops-to-gpu"> {
-  let summary = "Convert mapped scf.parallel ops to gpu launch operations";
-  let constructor = "mlir::createParallelLoopToGpuPass()";
-  let dependentDialects = ["AffineDialect", "gpu::GPUDialect"];
-}
-
 //===----------------------------------------------------------------------===//
 // ShapeToStandard
 //===----------------------------------------------------------------------===//
@@ -758,20 +578,6 @@ def ConvertShapeConstraints : Pass<"convert-shape-constraints"> {
   let dependentDialects = ["cf::ControlFlowDialect", "scf::SCFDialect"];
 }
 
-//===----------------------------------------------------------------------===//
-// SPIRVToLLVM
-//===----------------------------------------------------------------------===//
-
-def ConvertSPIRVToLLVM : Pass<"convert-spirv-to-llvm", "ModuleOp"> {
-  let summary = "Convert SPIR-V dialect to LLVM dialect";
-  let description = [{
-    See https://mlir.llvm.org/docs/SPIRVToLLVMDialectConversion/
-    for more details.
-  }];
-  let constructor = "mlir::createConvertSPIRVToLLVMPass()";
-  let dependentDialects = ["LLVM::LLVMDialect"];
-}
-
 //===----------------------------------------------------------------------===//
 // TensorToLinalg
 //===----------------------------------------------------------------------===//
@@ -801,114 +607,6 @@ def ConvertTensorToSPIRV : Pass<"convert-tensor-to-spirv"> {
   ];
 }
 
-//===----------------------------------------------------------------------===//
-// TosaToArith
-//===----------------------------------------------------------------------===//
-
-def TosaToArith : Pass<"tosa-to-arith"> {
-  let summary = "Lower TOSA to the Arith dialect";
-  let dependentDialects = [
-    "arith::ArithmeticDialect",
-  ];
-  let description = [{
-    Pass that converts TOSA operations to the equivalent operations using the
-    operations in the Arith dialect. The ApplyScale operator is optionally
-    included as it is often preserved until the final invocation.
-  }];
-
-  let options = [
-    Option<"includeApplyRescale", "include-apply-rescale",
-           "bool", /*default=*/"false",
-           "Whether to include the lowering for tosa.apply_rescale to arith">,
-    Option<"use32Bit", "use-32-bit",
-           "bool", /*default=*/"false",
-           "Whether to prioritze lowering to 32-bit operations">
-  ];
-
-  let constructor = "tosa::createTosaToArith()";
-}
-
-//===----------------------------------------------------------------------===//
-// TosaToLinalg
-//===----------------------------------------------------------------------===//
-
-def TosaToLinalg
-    : InterfacePass<"tosa-to-linalg", "FunctionOpInterface"> {
-  let summary = "Lower TOSA to LinAlg on tensors";
-  let description = [{
-    Pass that converts TOSA operations to the equivalent operations using the
-    tensor operations in LinAlg.
-  }];
-
-  let constructor = "tosa::createTosaToLinalg()";
-}
-
-//===----------------------------------------------------------------------===//
-// TosaToLinalgNamed
-//===----------------------------------------------------------------------===//
-
-def TosaToLinalgNamed
-    : InterfacePass<"tosa-to-linalg-named", "FunctionOpInterface"> {
-  let summary = "Lower TOSA to LinAlg named operations";
-  let description = [{
-    Pass that converts TOSA operations to the equivalent operations using the
-    Linalg named operations.
-  }];
-
-  let constructor = "tosa::createTosaToLinalgNamed()";
-}
-
-//===----------------------------------------------------------------------===//
-// TosaToSCF
-//===----------------------------------------------------------------------===//
-
-def TosaToSCF : Pass<"tosa-to-scf"> {
-  let summary = "Lower TOSA to the SCF dialect";
-  let dependentDialects = ["tensor::TensorDialect, scf::SCFDialect"];
-  let description = [{
-    Pass that converts TOSA's control flow operations to the equivalent SCF
-    operations.
-  }];
-
-  let constructor = "tosa::createTosaToSCF()";
-}
-
-//===----------------------------------------------------------------------===//
-// TosaToTensor
-//===----------------------------------------------------------------------===//
-
-def TosaToTensor : Pass<"tosa-to-tensor"> {
-  let summary = "Lower TOSA to the Tensor dialect";
-  let dependentDialects = [
-    "tensor::TensorDialect",
-  ];
-  let description = [{
-    Pass that converts TOSA operations to the equivalent operations using the
-    operations in the Tensor dialect.
-  }];
-
-  let constructor = "tosa::createTosaToTensor()";
-}
-
-//===----------------------------------------------------------------------===//
-// VectorToGPU
-//===----------------------------------------------------------------------===//
-
-def ConvertVectorToGPU : Pass<"convert-vector-to-gpu"> {
-  let summary = "Lower the operations from the vector dialect into the GPU "
-                "dialect";
-  let constructor = "mlir::createConvertVectorToGPUPass()";
-  let dependentDialects = [
-    "memref::MemRefDialect", "gpu::GPUDialect", "AffineDialect",
-    "vector::VectorDialect", "nvgpu::NVGPUDialect"
-  ];
-
-  let options = [
-    Option<"useNvGpu", "use-nvgpu", "bool", /*default=*/"false",
-      "convert to NvGPU ops instead of GPU dialect ops">
-  ];
-}
-
 //===----------------------------------------------------------------------===//
 // VectorToSCF
 //===----------------------------------------------------------------------===//
diff --git a/mlir/include/mlir/Dialect/CMakeLists.txt b/mlir/include/mlir/Dialect/CMakeLists.txt
index 270cd54cca96..48520705abca 100644
--- a/mlir/include/mlir/Dialect/CMakeLists.txt
+++ b/mlir/include/mlir/Dialect/CMakeLists.txt
@@ -1,10 +1,10 @@
 add_subdirectory(Affine)
-add_subdirectory(AMDGPU)
+#add_subdirectory(AMDGPU)
 add_subdirectory(Arithmetic)
 add_subdirectory(Async)
-add_subdirectory(ArmNeon)
-add_subdirectory(ArmSVE)
-add_subdirectory(AMX)
+# add_subdirectory(ArmNeon)
+# add_subdirectory(ArmSVE)
+#add_subdirectory(AMX)
 add_subdirectory(Bufferization)
 add_subdirectory(Complex)
 add_subdirectory(ControlFlow)
@@ -16,8 +16,8 @@ add_subdirectory(Math)
 add_subdirectory(Linalg)
 add_subdirectory(LLVMIR)
 add_subdirectory(MemRef)
-add_subdirectory(MLProgram)
-add_subdirectory(NVGPU)
+#add_subdirectory(MLProgram)
+#add_subdirectory(NVGPU)
 add_subdirectory(OpenACC)
 add_subdirectory(OpenMP)
 add_subdirectory(PDL)
@@ -28,7 +28,7 @@ add_subdirectory(Shape)
 add_subdirectory(SparseTensor)
 add_subdirectory(SPIRV)
 add_subdirectory(Tensor)
-add_subdirectory(Tosa)
+#add_subdirectory(Tosa)
 add_subdirectory(Transform)
 add_subdirectory(Vector)
-add_subdirectory(X86Vector)
+#add_subdirectory(X86Vector)
diff --git a/mlir/include/mlir/InitAllDialects.h b/mlir/include/mlir/InitAllDialects.h
index c91eb56f44bf..ae9157e890dc 100644
--- a/mlir/include/mlir/InitAllDialects.h
+++ b/mlir/include/mlir/InitAllDialects.h
@@ -71,62 +71,9 @@ namespace mlir {
 /// Add all the MLIR dialects to the provided registry.
 inline void registerAllDialects(DialectRegistry &registry) {
   // clang-format off
-  registry.insert<acc::OpenACCDialect,
-                  AffineDialect,
-                  arith::ArithmeticDialect,
-                  amdgpu::AMDGPUDialect,
-                  amx::AMXDialect,
-                  arm_neon::ArmNeonDialect,
-                  async::AsyncDialect,
-                  bufferization::BufferizationDialect,
-                  cf::ControlFlowDialect,
-                  complex::ComplexDialect,
-                  DLTIDialect,
-                  emitc::EmitCDialect,
-                  func::FuncDialect,
-                  gpu::GPUDialect,
-                  LLVM::LLVMDialect,
-                  linalg::LinalgDialect,
-                  math::MathDialect,
-                  memref::MemRefDialect,
-                  ml_program::MLProgramDialect,
-                  nvgpu::NVGPUDialect,
-                  scf::SCFDialect,
-                  omp::OpenMPDialect,
-                  pdl::PDLDialect,
-                  pdl_interp::PDLInterpDialect,
-                  quant::QuantizationDialect,
-                  spirv::SPIRVDialect,
-                  arm_sve::ArmSVEDialect,
-                  vector::VectorDialect,
-                  NVVM::NVVMDialect,
-                  ROCDL::ROCDLDialect,
-                  shape::ShapeDialect,
-                  sparse_tensor::SparseTensorDialect,
-                  tensor::TensorDialect,
-                  transform::TransformDialect,
-                  tosa::TosaDialect,
-                  x86vector::X86VectorDialect>();
+  registry.insert<func::FuncDialect,
+                  quant::QuantizationDialect>();
   // clang-format on
-
-  // Register all dialect extensions.
-  bufferization::registerTransformDialectExtension(registry);
-  linalg::registerTransformDialectExtension(registry);
-  scf::registerTransformDialectExtension(registry);
-
-  // Register all external models.
-  arith::registerBufferizableOpInterfaceExternalModels(registry);
-  bufferization::func_ext::registerBufferizableOpInterfaceExternalModels(
-      registry);
-  linalg::registerBufferizableOpInterfaceExternalModels(registry);
-  linalg::registerTilingInterfaceExternalModels(registry);
-  scf::registerBufferizableOpInterfaceExternalModels(registry);
-  shape::registerBufferizableOpInterfaceExternalModels(registry);
-  sparse_tensor::registerBufferizableOpInterfaceExternalModels(registry);
-  tensor::registerBufferizableOpInterfaceExternalModels(registry);
-  tensor::registerInferTypeOpInterfaceExternalModels(registry);
-  tensor::registerTilingInterfaceExternalModels(registry);
-  vector::registerBufferizableOpInterfaceExternalModels(registry);
 }
 
 /// Append all the MLIR dialects to the registry contained in the given context.
diff --git a/mlir/include/mlir/InitAllPasses.h b/mlir/include/mlir/InitAllPasses.h
index 7644f4c3552c..d480ac96bc9d 100644
--- a/mlir/include/mlir/InitAllPasses.h
+++ b/mlir/include/mlir/InitAllPasses.h
@@ -61,10 +61,10 @@ inline void registerAllPasses() {
   bufferization::registerBufferizationPasses();
   func::registerFuncPasses();
   registerGPUPasses();
-  registerGpuSerializeToCubinPass();
-  registerGpuSerializeToHsacoPass();
+  //registerGpuSerializeToCubinPass();
+  //registerGpuSerializeToHsacoPass();
   registerLinalgPasses();
-  registerNVGPUPasses();
+  //registerNVGPUPasses();
   registerSparseTensorPasses();
   LLVM::registerLLVMPasses();
   memref::registerMemRefPasses();
@@ -72,7 +72,7 @@ inline void registerAllPasses() {
   registerShapePasses();
   spirv::registerSPIRVPasses();
   tensor::registerTensorPasses();
-  tosa::registerTosaOptPasses();
+  //tosa::registerTosaOptPasses();
   transform::registerTransformPasses();
   vector::registerVectorPasses();
 
diff --git a/mlir/include/mlir/Target/LLVMIR/Dialect/All.h b/mlir/include/mlir/Target/LLVMIR/Dialect/All.h
index 2bbfd7a45d09..d2abe8160e44 100644
--- a/mlir/include/mlir/Target/LLVMIR/Dialect/All.h
+++ b/mlir/include/mlir/Target/LLVMIR/Dialect/All.h
@@ -30,15 +30,15 @@ class DialectRegistry;
 /// Registers all dialects that can be translated to LLVM IR and the
 /// corresponding translation interfaces.
 static inline void registerAllToLLVMIRTranslations(DialectRegistry &registry) {
-  registerArmNeonDialectTranslation(registry);
-  registerAMXDialectTranslation(registry);
-  registerArmSVEDialectTranslation(registry);
-  registerLLVMDialectTranslation(registry);
-  registerNVVMDialectTranslation(registry);
-  registerOpenACCDialectTranslation(registry);
-  registerOpenMPDialectTranslation(registry);
-  registerROCDLDialectTranslation(registry);
-  registerX86VectorDialectTranslation(registry);
+  // registerArmNeonDialectTranslation(registry);
+  // registerAMXDialectTranslation(registry);
+  // registerArmSVEDialectTranslation(registry);
+  // registerLLVMDialectTranslation(registry);
+  // registerNVVMDialectTranslation(registry);
+  // registerOpenACCDialectTranslation(registry);
+  // registerOpenMPDialectTranslation(registry);
+  // registerROCDLDialectTranslation(registry);
+  // registerX86VectorDialectTranslation(registry);
 }
 } // namespace mlir
 
diff --git a/mlir/lib/Bindings/Python/RegisterEverything.cpp b/mlir/lib/Bindings/Python/RegisterEverything.cpp
index fed5c36a625b..ac0330c38764 100644
--- a/mlir/lib/Bindings/Python/RegisterEverything.cpp
+++ b/mlir/lib/Bindings/Python/RegisterEverything.cpp
@@ -18,9 +18,4 @@ PYBIND11_MODULE(_mlirRegisterEverything, m) {
   m.def("register_dialects", [](MlirDialectRegistry registry) {
     mlirRegisterAllDialects(registry);
   });
-
-  // Register all passes on load.
-  mlirRegisterAllPasses();
-  mlirRegisterConversionPasses();
-  mlirRegisterTransformsPasses();
 }
diff --git a/mlir/lib/CAPI/Dialect/CMakeLists.txt b/mlir/lib/CAPI/Dialect/CMakeLists.txt
index e5173ffd38ab..82730cf0a745 100644
--- a/mlir/lib/CAPI/Dialect/CMakeLists.txt
+++ b/mlir/lib/CAPI/Dialect/CMakeLists.txt
@@ -1,93 +1,3 @@
-add_mlir_upstream_c_api_library(MLIRCAPIAsync
-  Async.cpp
-  AsyncPasses.cpp
-
-  PARTIAL_SOURCES_INTENDED
-  DEPENDS
-  MLIRAsyncPassIncGen
-
-  LINK_LIBS PUBLIC
-  MLIRCAPIIR
-  MLIRAsyncDialect
-  MLIRAsyncTransforms
-  MLIRPass
-)
-
-add_mlir_upstream_c_api_library(MLIRCAPIControlFlow
-  ControlFlow.cpp
-
-  PARTIAL_SOURCES_INTENDED
-  LINK_LIBS PUBLIC
-  MLIRCAPIIR
-  MLIRControlFlowDialect
-)
-
-add_mlir_upstream_c_api_library(MLIRCAPIGPU
-  GPU.cpp
-  GPUPasses.cpp
-
-  PARTIAL_SOURCES_INTENDED
-  DEPENDS
-  MLIRGPUPassIncGen
-
-  LINK_LIBS PUBLIC
-  MLIRCAPIIR
-  MLIRGPUTransforms
-  MLIRPass
-)
-
-add_mlir_upstream_c_api_library(MLIRCAPILLVM
-  LLVM.cpp
-
-  PARTIAL_SOURCES_INTENDED
-  LINK_LIBS PUBLIC
-  MLIRCAPIIR
-  MLIRLLVMDialect
-)
-
-add_mlir_upstream_c_api_library(MLIRCAPILinalg
-  Linalg.cpp
-  LinalgPasses.cpp
-
-  PARTIAL_SOURCES_INTENDED
-  DEPENDS
-  MLIRLinalgPassIncGen
-
-  LINK_LIBS PUBLIC
-  MLIRCAPIIR
-  MLIRLinalgDialect
-  MLIRPass
-  MLIRLinalgTransforms
-)
-
-add_mlir_upstream_c_api_library(MLIRCAPISCF
-  SCF.cpp
-
-  PARTIAL_SOURCES_INTENDED
-  LINK_LIBS PUBLIC
-  MLIRCAPIIR
-  MLIRSCFDialect
-)
-
-add_mlir_upstream_c_api_library(MLIRCAPIShape
-  Shape.cpp
-
-  PARTIAL_SOURCES_INTENDED
-  LINK_LIBS PUBLIC
-  MLIRCAPIIR
-  MLIRShapeDialect
-)
-
-add_mlir_upstream_c_api_library(MLIRCAPISparseTensor
-  SparseTensor.cpp
-  SparseTensorPasses.cpp
-
-  PARTIAL_SOURCES_INTENDED
-  LINK_LIBS PUBLIC
-  MLIRCAPIIR
-  MLIRSparseTensorDialect
-  MLIRSparseTensorTransforms
-)
 
 add_mlir_upstream_c_api_library(MLIRCAPIFunc
   Func.cpp
@@ -98,15 +8,6 @@ add_mlir_upstream_c_api_library(MLIRCAPIFunc
   MLIRFuncDialect
 )
 
-add_mlir_upstream_c_api_library(MLIRCAPITensor
-  Tensor.cpp
-
-  PARTIAL_SOURCES_INTENDED
-  LINK_LIBS PUBLIC
-  MLIRCAPIIR
-  MLIRTensorDialect
-)
-
 add_mlir_upstream_c_api_library(MLIRCAPIQuant
   Quant.cpp
 
@@ -116,11 +17,3 @@ add_mlir_upstream_c_api_library(MLIRCAPIQuant
   MLIRQuantDialect
 )
 
-add_mlir_upstream_c_api_library(MLIRCAPIPDL
-  PDL.cpp
-
-  PARTIAL_SOURCES_INTENDED
-  LINK_LIBS PUBLIC
-  MLIRCAPIIR
-  MLIRPDLDialect
-)
diff --git a/mlir/lib/CAPI/RegisterEverything/CMakeLists.txt b/mlir/lib/CAPI/RegisterEverything/CMakeLists.txt
index 942bba84e553..7fe7b2e049e1 100644
--- a/mlir/lib/CAPI/RegisterEverything/CMakeLists.txt
+++ b/mlir/lib/CAPI/RegisterEverything/CMakeLists.txt
@@ -11,6 +11,5 @@ add_mlir_upstream_c_api_library(MLIRCAPIRegisterEverything
   ${conversion_libs}
 
   MLIRCAPIIR
-  MLIRLLVMToLLVMIRTranslation
   MLIRCAPITransforms
 )
diff --git a/mlir/lib/CAPI/RegisterEverything/RegisterEverything.cpp b/mlir/lib/CAPI/RegisterEverything/RegisterEverything.cpp
index 25a1a216c4a2..8ce2988ce875 100644
--- a/mlir/lib/CAPI/RegisterEverything/RegisterEverything.cpp
+++ b/mlir/lib/CAPI/RegisterEverything/RegisterEverything.cpp
@@ -18,7 +18,7 @@ void mlirRegisterAllDialects(MlirDialectRegistry registry) {
 }
 
 void mlirRegisterAllLLVMTranslations(MlirContext context) {
-  mlir::registerLLVMDialectTranslation(*unwrap(context));
+  // mlir::registerLLVMDialectTranslation(*unwrap(context));
 }
 
 void mlirRegisterAllPasses() { mlir::registerAllPasses(); }
diff --git a/mlir/lib/Conversion/CMakeLists.txt b/mlir/lib/Conversion/CMakeLists.txt
index d87d0ec251ff..cff0d0ba45e1 100644
--- a/mlir/lib/Conversion/CMakeLists.txt
+++ b/mlir/lib/Conversion/CMakeLists.txt
@@ -1,8 +1,8 @@
 add_subdirectory(AffineToStandard)
-add_subdirectory(AMDGPUToROCDL)
+#add_subdirectory(AMDGPUToROCDL)
 add_subdirectory(ArithmeticToLLVM)
 add_subdirectory(ArithmeticToSPIRV)
-add_subdirectory(ArmNeon2dToIntr)
+#add_subdirectory(ArmNeon2dToIntr)
 add_subdirectory(AsyncToLLVM)
 add_subdirectory(BufferizationToMemRef)
 add_subdirectory(ComplexToLLVM)
@@ -12,11 +12,11 @@ add_subdirectory(ControlFlowToLLVM)
 add_subdirectory(ControlFlowToSPIRV)
 add_subdirectory(FuncToLLVM)
 add_subdirectory(FuncToSPIRV)
-add_subdirectory(GPUCommon)
-add_subdirectory(GPUToNVVM)
-add_subdirectory(GPUToROCDL)
-add_subdirectory(GPUToSPIRV)
-add_subdirectory(GPUToVulkan)
+#add_subdirectory(GPUCommon)
+#add_subdirectory(GPUToNVVM)
+#add_subdirectory(GPUToROCDL)
+#add_subdirectory(GPUToSPIRV)
+#add_subdirectory(GPUToVulkan)
 add_subdirectory(LinalgToLLVM)
 add_subdirectory(LinalgToSPIRV)
 add_subdirectory(LinalgToStandard)
@@ -27,25 +27,25 @@ add_subdirectory(MathToLLVM)
 add_subdirectory(MathToSPIRV)
 add_subdirectory(MemRefToLLVM)
 add_subdirectory(MemRefToSPIRV)
-add_subdirectory(NVGPUToNVVM)
+#add_subdirectory(NVGPUToNVVM)
 add_subdirectory(OpenACCToLLVM)
 add_subdirectory(OpenACCToSCF)
 add_subdirectory(OpenMPToLLVM)
 add_subdirectory(PDLToPDLInterp)
 add_subdirectory(ReconcileUnrealizedCasts)
 add_subdirectory(SCFToControlFlow)
-add_subdirectory(SCFToGPU)
+# add_subdirectory(SCFToGPU)
 add_subdirectory(SCFToOpenMP)
 add_subdirectory(SCFToSPIRV)
 add_subdirectory(ShapeToStandard)
-add_subdirectory(SPIRVToLLVM)
+#add_subdirectory(SPIRVToLLVM)
 add_subdirectory(TensorToLinalg)
 add_subdirectory(TensorToSPIRV)
-add_subdirectory(TosaToArith)
-add_subdirectory(TosaToLinalg)
-add_subdirectory(TosaToSCF)
-add_subdirectory(TosaToTensor)
+# add_subdirectory(TosaToArith)
+# add_subdirectory(TosaToLinalg)
+# add_subdirectory(TosaToSCF)
+# add_subdirectory(TosaToTensor)
 add_subdirectory(VectorToLLVM)
-add_subdirectory(VectorToGPU)
+# add_subdirectory(VectorToGPU)
 add_subdirectory(VectorToSCF)
 add_subdirectory(VectorToSPIRV)
diff --git a/mlir/lib/Conversion/VectorToLLVM/CMakeLists.txt b/mlir/lib/Conversion/VectorToLLVM/CMakeLists.txt
index dee915e89c91..32406f5a7fbe 100644
--- a/mlir/lib/Conversion/VectorToLLVM/CMakeLists.txt
+++ b/mlir/lib/Conversion/VectorToLLVM/CMakeLists.txt
@@ -13,12 +13,6 @@ add_mlir_conversion_library(MLIRVectorToLLVM
   Core
 
   LINK_LIBS PUBLIC
-  MLIRArithmeticDialect
-  MLIRArmNeonDialect
-  MLIRArmSVEDialect
-  MLIRArmSVETransforms
-  MLIRAMXDialect
-  MLIRAMXTransforms
   MLIRLLVMCommonConversion
   MLIRLLVMDialect
   MLIRMemRefDialect
@@ -26,6 +20,4 @@ add_mlir_conversion_library(MLIRVectorToLLVM
   MLIRTransforms
   MLIRVectorDialect
   MLIRVectorTransforms
-  MLIRX86VectorDialect
-  MLIRX86VectorTransforms
   )
diff --git a/mlir/lib/Conversion/VectorToLLVM/ConvertVectorToLLVMPass.cpp b/mlir/lib/Conversion/VectorToLLVM/ConvertVectorToLLVMPass.cpp
index d74a3cfbaf88..153918c44fba 100644
--- a/mlir/lib/Conversion/VectorToLLVM/ConvertVectorToLLVMPass.cpp
+++ b/mlir/lib/Conversion/VectorToLLVM/ConvertVectorToLLVMPass.cpp
@@ -49,14 +49,6 @@ struct LowerVectorToLLVMPass
     registry.insert<LLVM::LLVMDialect>();
     registry.insert<arith::ArithmeticDialect>();
     registry.insert<memref::MemRefDialect>();
-    if (armNeon)
-      registry.insert<arm_neon::ArmNeonDialect>();
-    if (armSVE)
-      registry.insert<arm_sve::ArmSVEDialect>();
-    if (amx)
-      registry.insert<amx::AMXDialect>();
-    if (x86Vector)
-      registry.insert<x86vector::X86VectorDialect>();
   }
   void runOnOperation() override;
 };
@@ -93,24 +85,6 @@ void LowerVectorToLLVMPass::runOnOperation() {
   target.addLegalDialect<arith::ArithmeticDialect>();
   target.addLegalDialect<memref::MemRefDialect>();
   target.addLegalOp<UnrealizedConversionCastOp>();
-  if (armNeon) {
-    // TODO: we may or may not want to include in-dialect lowering to
-    // LLVM-compatible operations here. So far, all operations in the dialect
-    // can be translated to LLVM IR so there is no conversion necessary.
-    target.addLegalDialect<arm_neon::ArmNeonDialect>();
-  }
-  if (armSVE) {
-    configureArmSVELegalizeForExportTarget(target);
-    populateArmSVELegalizeForLLVMExportPatterns(converter, patterns);
-  }
-  if (amx) {
-    configureAMXLegalizeForExportTarget(target);
-    populateAMXLegalizeForLLVMExportPatterns(converter, patterns);
-  }
-  if (x86Vector) {
-    configureX86VectorLegalizeForExportTarget(target);
-    populateX86VectorLegalizeForLLVMExportPatterns(converter, patterns);
-  }
 
   if (failed(
           applyPartialConversion(getOperation(), target, std::move(patterns))))
diff --git a/mlir/lib/Dialect/CMakeLists.txt b/mlir/lib/Dialect/CMakeLists.txt
index 9f84b6211279..38b97dc1deb6 100644
--- a/mlir/lib/Dialect/CMakeLists.txt
+++ b/mlir/lib/Dialect/CMakeLists.txt
@@ -1,10 +1,10 @@
 add_subdirectory(Affine)
-add_subdirectory(AMDGPU)
+#add_subdirectory(AMDGPU)
 add_subdirectory(Arithmetic)
-add_subdirectory(ArmNeon)
-add_subdirectory(ArmSVE)
+# add_subdirectory(ArmNeon)
+# add_subdirectory(ArmSVE)
 add_subdirectory(Async)
-add_subdirectory(AMX)
+#add_subdirectory(AMX)
 add_subdirectory(Bufferization)
 add_subdirectory(Complex)
 add_subdirectory(ControlFlow)
@@ -16,8 +16,8 @@ add_subdirectory(Linalg)
 add_subdirectory(LLVMIR)
 add_subdirectory(Math)
 add_subdirectory(MemRef)
-add_subdirectory(MLProgram)
-add_subdirectory(NVGPU)
+#add_subdirectory(MLProgram)
+#add_subdirectory(NVGPU)
 add_subdirectory(OpenACC)
 add_subdirectory(OpenMP)
 add_subdirectory(PDL)
@@ -28,11 +28,11 @@ add_subdirectory(Shape)
 add_subdirectory(SparseTensor)
 add_subdirectory(SPIRV)
 add_subdirectory(Tensor)
-add_subdirectory(Tosa)
+#add_subdirectory(Tosa)
 add_subdirectory(Transform)
 add_subdirectory(Utils)
 add_subdirectory(Vector)
-add_subdirectory(X86Vector)
+#add_subdirectory(X86Vector)
 
 set(LLVM_OPTIONAL_SOURCES
   Traits.cpp
diff --git a/mlir/lib/Dialect/Linalg/Transforms/CMakeLists.txt b/mlir/lib/Dialect/Linalg/Transforms/CMakeLists.txt
index 6d97dfc6d84f..7ce49dee56ae 100644
--- a/mlir/lib/Dialect/Linalg/Transforms/CMakeLists.txt
+++ b/mlir/lib/Dialect/Linalg/Transforms/CMakeLists.txt
@@ -68,6 +68,5 @@ add_mlir_dialect_library(MLIRLinalgTransforms
   MLIRVectorDialect
   MLIRVectorTransforms
   MLIRVectorUtils
-  MLIRX86VectorTransforms
   MLIRVectorToSCF
 )
diff --git a/mlir/lib/Dialect/Linalg/Transforms/LinalgStrategyPasses.cpp b/mlir/lib/Dialect/Linalg/Transforms/LinalgStrategyPasses.cpp
index 05a47942c2da..9265ffebc0e2 100644
--- a/mlir/lib/Dialect/Linalg/Transforms/LinalgStrategyPasses.cpp
+++ b/mlir/lib/Dialect/Linalg/Transforms/LinalgStrategyPasses.cpp
@@ -322,13 +322,13 @@ struct LinalgStrategyLowerVectorsPass
       vector::populateVectorShapeCastLoweringPatterns(patterns);
     }
     // In a progressive lowering of vectors, this would be the 7th step.
-    if (options.transposeLowering) {
-      vector::populateVectorTransposeLoweringPatterns(
-          patterns, options.vectorTransformOptions);
-      if (options.avx2Lowering)
-        x86vector::avx2::populateSpecializedTransposeLoweringPatterns(
-            patterns, options.avx2LoweringOptions, /*benefit=*/10);
-    }
+    // if (options.transposeLowering) {
+    //   vector::populateVectorTransposeLoweringPatterns(
+    //       patterns, options.vectorTransformOptions);
+    //   if (options.avx2Lowering)
+    //     x86vector::avx2::populateSpecializedTransposeLoweringPatterns(
+    //         patterns, options.avx2LoweringOptions, /*benefit=*/10);
+    // }
     (void)applyPatternsAndFoldGreedily(funcOp, std::move(patterns));
   }
 
diff --git a/mlir/lib/Dialect/Math/Transforms/CMakeLists.txt b/mlir/lib/Dialect/Math/Transforms/CMakeLists.txt
index 4b7512cf1c39..d4087777cda0 100644
--- a/mlir/lib/Dialect/Math/Transforms/CMakeLists.txt
+++ b/mlir/lib/Dialect/Math/Transforms/CMakeLists.txt
@@ -8,12 +8,11 @@ add_mlir_dialect_library(MLIRMathTransforms
 
   LINK_LIBS PUBLIC
   MLIRArithmeticDialect
-  MLIRDialectUtils  
+  MLIRDialectUtils
   MLIRIR
   MLIRMathDialect
   MLIRPass
   MLIRTransforms
-  MLIRX86VectorDialect
   MLIRVectorDialect
   MLIRVectorUtils
   )
diff --git a/mlir/lib/Dialect/X86Vector/Transforms/CMakeLists.txt b/mlir/lib/Dialect/X86Vector/Transforms/CMakeLists.txt
index 7824ecfa0d0d..6be458135736 100644
--- a/mlir/lib/Dialect/X86Vector/Transforms/CMakeLists.txt
+++ b/mlir/lib/Dialect/X86Vector/Transforms/CMakeLists.txt
@@ -7,7 +7,6 @@ add_mlir_dialect_library(MLIRX86VectorTransforms
 
   LINK_LIBS PUBLIC
   MLIRArithmeticDialect
-  MLIRX86VectorDialect
   MLIRIR
   MLIRLLVMCommonConversion
   MLIRLLVMDialect
diff --git a/mlir/lib/IR/Verifier.cpp b/mlir/lib/IR/Verifier.cpp
index 96364bd81b9f..fd6b274a0072 100644
--- a/mlir/lib/IR/Verifier.cpp
+++ b/mlir/lib/IR/Verifier.cpp
@@ -155,11 +155,6 @@ LogicalResult OperationVerifier::verifyBlock(
   if (mayBeValidWithoutTerminator(&block))
     return success();
 
-  Operation &terminator = block.back();
-  if (!terminator.mightHaveTrait<OpTrait::IsTerminator>())
-    return block.back().emitError("block with no terminator, has ")
-           << terminator;
-
   return success();
 }
 
diff --git a/mlir/lib/Target/LLVMIR/CMakeLists.txt b/mlir/lib/Target/LLVMIR/CMakeLists.txt
index 3ee83820b1e2..467ec11930ea 100644
--- a/mlir/lib/Target/LLVMIR/CMakeLists.txt
+++ b/mlir/lib/Target/LLVMIR/CMakeLists.txt
@@ -37,15 +37,12 @@ add_mlir_translation_library(MLIRToLLVMIRTranslationRegistration
   ConvertToLLVMIR.cpp
 
   LINK_LIBS PUBLIC
-  MLIRArmNeonToLLVMIRTranslation
-  MLIRArmSVEToLLVMIRTranslation
-  MLIRAMXToLLVMIRTranslation
-  MLIRX86VectorToLLVMIRTranslation
+  # MLIRX86VectorToLLVMIRTranslation
   MLIRLLVMToLLVMIRTranslation
-  MLIRNVVMToLLVMIRTranslation
-  MLIROpenACCToLLVMIRTranslation
-  MLIROpenMPToLLVMIRTranslation
-  MLIRROCDLToLLVMIRTranslation
+  # MLIRNVVMToLLVMIRTranslation
+  # MLIROpenACCToLLVMIRTranslation
+  # MLIROpenMPToLLVMIRTranslation
+  # MLIRROCDLToLLVMIRTranslation
   )
 
 add_mlir_translation_library(MLIRTargetLLVMIRImport
diff --git a/mlir/lib/Target/LLVMIR/Dialect/CMakeLists.txt b/mlir/lib/Target/LLVMIR/Dialect/CMakeLists.txt
index 8df5176ad056..eeafa3870a4d 100644
--- a/mlir/lib/Target/LLVMIR/Dialect/CMakeLists.txt
+++ b/mlir/lib/Target/LLVMIR/Dialect/CMakeLists.txt
@@ -1,9 +1,9 @@
-add_subdirectory(ArmNeon)
-add_subdirectory(ArmSVE)
-add_subdirectory(AMX)
+# add_subdirectory(ArmNeon)
+# add_subdirectory(ArmSVE)
+# add_subdirectory(AMX)
 add_subdirectory(LLVMIR)
-add_subdirectory(NVVM)
-add_subdirectory(OpenACC)
-add_subdirectory(OpenMP)
-add_subdirectory(ROCDL)
-add_subdirectory(X86Vector)
+# add_subdirectory(NVVM)
+# add_subdirectory(OpenACC)
+# add_subdirectory(OpenMP)
+# add_subdirectory(ROCDL)
+# add_subdirectory(X86Vector)
diff --git a/mlir/lib/Target/LLVMIR/Dialect/X86Vector/CMakeLists.txt b/mlir/lib/Target/LLVMIR/Dialect/X86Vector/CMakeLists.txt
index 3910982c0cdc..448c9bd3fea3 100644
--- a/mlir/lib/Target/LLVMIR/Dialect/X86Vector/CMakeLists.txt
+++ b/mlir/lib/Target/LLVMIR/Dialect/X86Vector/CMakeLists.txt
@@ -9,7 +9,6 @@ add_mlir_translation_library(MLIRX86VectorToLLVMIRTranslation
 
   LINK_LIBS PUBLIC
   MLIRIR
-  MLIRX86VectorDialect
   MLIRLLVMDialect
   MLIRSupport
   MLIRTargetLLVMIRExport
diff --git a/mlir/python/CMakeLists.txt b/mlir/python/CMakeLists.txt
index 7eb6e05e427c..74c7f40e5dd8 100644
--- a/mlir/python/CMakeLists.txt
+++ b/mlir/python/CMakeLists.txt
@@ -27,16 +27,6 @@ declare_mlir_python_sources(MLIRPythonSources.Core
     _mlir_libs/_mlir/passmanager.pyi
 )
 
-declare_mlir_python_sources(MLIRPythonSources.ExecutionEngine
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  ADD_TO_PARENT MLIRPythonSources
-  SOURCES
-    execution_engine.py
-    _mlir_libs/_mlirExecutionEngine.pyi
-  SOURCES_GLOB
-    runtime/*.py
-)
-
 declare_mlir_python_sources(MLIRPythonCAPI.HeaderSources
   ROOT_DIR "${MLIR_SOURCE_DIR}/include"
   SOURCES_GLOB "mlir-c/*.h"
@@ -46,22 +36,6 @@ declare_mlir_python_sources(MLIRPythonCAPI.HeaderSources
 # Dialect bindings
 ################################################################################
 
-declare_mlir_dialect_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/AsyncOps.td
-  SOURCES_GLOB dialects/async_dialect/*.py
-  DIALECT_NAME async_dialect)
-
-declare_mlir_dialect_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/BufferizationOps.td
-  SOURCES
-    dialects/bufferization.py
-    dialects/_bufferization_ops_ext.py
-  DIALECT_NAME bufferization)
-
 declare_mlir_dialect_python_bindings(
   ADD_TO_PARENT MLIRPythonSources.Dialects
   ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
@@ -71,22 +45,6 @@ declare_mlir_dialect_python_bindings(
     dialects/_builtin_ops_ext.py
   DIALECT_NAME builtin)
 
-declare_mlir_dialect_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/ComplexOps.td
-  SOURCES
-    dialects/complex.py
-  DIALECT_NAME complex)
-
-declare_mlir_dialect_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/ControlFlowOps.td
-  SOURCES
-    dialects/cf.py
-  DIALECT_NAME cf)
-
 declare_mlir_dialect_python_bindings(
   ADD_TO_PARENT MLIRPythonSources.Dialects
   ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
@@ -96,87 +54,6 @@ declare_mlir_dialect_python_bindings(
     dialects/_func_ops_ext.py
   DIALECT_NAME func)
 
-declare_mlir_dialect_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/GPUOps.td
-  SOURCES_GLOB dialects/gpu/*.py
-  DIALECT_NAME gpu)
-
-declare_mlir_dialect_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/LinalgOps.td
-  SOURCES
-    dialects/_linalg_ops_ext.py
-  SOURCES_GLOB
-    dialects/linalg/*.py
-  DIALECT_NAME linalg
-  DEPENDS LinalgOdsGen)
-
-declare_mlir_dialect_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/TransformOps.td
-  SOURCES
-    dialects/_transform_ops_ext.py
-    dialects/transform/__init__.py
-  DIALECT_NAME transform)
-
-declare_mlir_dialect_extension_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/SCFLoopTransformOps.td
-  SOURCES
-    dialects/_loop_transform_ops_ext.py
-    dialects/transform/loop.py
-  DIALECT_NAME transform
-  EXTENSION_NAME loop_transform)
-
-declare_mlir_dialect_extension_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/LinalgStructuredTransformOps.td
-  SOURCES
-    dialects/_structured_transform_ops_ext.py
-    dialects/transform/structured.py
-  DIALECT_NAME transform
-  EXTENSION_NAME structured_transform)
-
-declare_mlir_dialect_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/MathOps.td
-  SOURCES dialects/math.py
-  DIALECT_NAME math)
-
-declare_mlir_dialect_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/ArithmeticOps.td
-  SOURCES
-    dialects/arith.py
-    dialects/_arith_ops_ext.py
-  DIALECT_NAME arith)
-
-declare_mlir_dialect_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/MemRefOps.td
-  SOURCES
-    dialects/memref.py
-    dialects/_memref_ops_ext.py
-  DIALECT_NAME memref)
-
-declare_mlir_dialect_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/MLProgramOps.td
-  SOURCES
-    dialects/ml_program.py
-    dialects/_ml_program_ops_ext.py
-  DIALECT_NAME ml_program)
-
 declare_mlir_python_sources(
   MLIRPythonSources.Dialects.quant
   ADD_TO_PARENT MLIRPythonSources.Dialects
@@ -185,60 +62,6 @@ declare_mlir_python_sources(
     dialects/quant.py
     _mlir_libs/_mlir/dialects/quant.pyi)
 
-declare_mlir_dialect_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/PDLOps.td
-  SOURCES
-    dialects/pdl.py
-    dialects/_pdl_ops_ext.py
-    _mlir_libs/_mlir/dialects/pdl.pyi
-  DIALECT_NAME pdl)
-
-declare_mlir_dialect_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/SCFOps.td
-  SOURCES
-    dialects/scf.py
-    dialects/_scf_ops_ext.py
-  DIALECT_NAME scf)
-
-declare_mlir_dialect_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/ShapeOps.td
-  SOURCES dialects/shape.py
-  DIALECT_NAME shape)
-
-declare_mlir_dialect_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/SparseTensorOps.td
-  SOURCES dialects/sparse_tensor.py
-  DIALECT_NAME sparse_tensor)
-
-declare_mlir_dialect_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/TensorOps.td
-  SOURCES dialects/tensor.py
-  DIALECT_NAME tensor)
-
-declare_mlir_dialect_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/TosaOps.td
-  SOURCES dialects/tosa.py
-  DIALECT_NAME tosa)
-
-declare_mlir_dialect_python_bindings(
-  ADD_TO_PARENT MLIRPythonSources.Dialects
-  ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-  TD_FILE dialects/VectorOps.td
-  SOURCES dialects/vector.py
-  DIALECT_NAME vector)
-
 ################################################################################
 # Python extensions.
 # The sources for these are all in lib/Bindings/Python, but since they have to
@@ -294,24 +117,9 @@ declare_mlir_python_extension(MLIRPythonExtension.RegisterEverything
   PRIVATE_LINK_LIBS
     LLVMSupport
   EMBED_CAPI_LINK_LIBS
-    MLIRCAPIConversion
-    MLIRCAPITransforms
     MLIRCAPIRegisterEverything
 )
 
-declare_mlir_python_extension(MLIRPythonExtension.Dialects.Linalg.Pybind
-  MODULE_NAME _mlirDialectsLinalg
-  ADD_TO_PARENT MLIRPythonSources.Dialects.linalg
-  ROOT_DIR "${PYTHON_SOURCE_DIR}"
-  SOURCES
-    DialectLinalg.cpp
-  PRIVATE_LINK_LIBS
-    LLVMSupport
-  EMBED_CAPI_LINK_LIBS
-    MLIRCAPIIR
-    MLIRCAPILinalg
-)
-
 declare_mlir_python_extension(MLIRPythonExtension.Dialects.Quant.Pybind
   MODULE_NAME _mlirDialectsQuant
   ADD_TO_PARENT MLIRPythonSources.Dialects.quant
@@ -325,138 +133,6 @@ declare_mlir_python_extension(MLIRPythonExtension.Dialects.Quant.Pybind
     MLIRCAPIQuant
 )
 
-declare_mlir_python_extension(MLIRPythonExtension.Dialects.PDL.Pybind
-  MODULE_NAME _mlirDialectsPDL
-  ADD_TO_PARENT MLIRPythonSources.Dialects.pdl
-  ROOT_DIR "${PYTHON_SOURCE_DIR}"
-  SOURCES
-    DialectPDL.cpp
-  PRIVATE_LINK_LIBS
-    LLVMSupport
-  EMBED_CAPI_LINK_LIBS
-    MLIRCAPIIR
-    MLIRCAPIPDL
-)
-
-declare_mlir_python_extension(MLIRPythonExtension.Dialects.SparseTensor.Pybind
-  MODULE_NAME _mlirDialectsSparseTensor
-  ADD_TO_PARENT MLIRPythonSources.Dialects.sparse_tensor
-  ROOT_DIR "${PYTHON_SOURCE_DIR}"
-  SOURCES
-    DialectSparseTensor.cpp
-  PRIVATE_LINK_LIBS
-    LLVMSupport
-  EMBED_CAPI_LINK_LIBS
-    MLIRCAPIIR
-    MLIRCAPISparseTensor
-)
-
-declare_mlir_python_extension(MLIRPythonExtension.AsyncDialectPasses
-  MODULE_NAME _mlirAsyncPasses
-  ADD_TO_PARENT MLIRPythonSources.Dialects.async_dialect
-  ROOT_DIR "${PYTHON_SOURCE_DIR}"
-  SOURCES
-    AsyncPasses.cpp
-  PRIVATE_LINK_LIBS
-    LLVMSupport
-  EMBED_CAPI_LINK_LIBS
-    MLIRCAPIAsync
-)
-
-if(MLIR_ENABLE_EXECUTION_ENGINE)
-  declare_mlir_python_extension(MLIRPythonExtension.ExecutionEngine
-    MODULE_NAME _mlirExecutionEngine
-    ADD_TO_PARENT MLIRPythonSources.ExecutionEngine
-    ROOT_DIR "${PYTHON_SOURCE_DIR}"
-    SOURCES
-      ExecutionEngineModule.cpp
-    PRIVATE_LINK_LIBS
-      LLVMSupport
-    EMBED_CAPI_LINK_LIBS
-      MLIRCAPIExecutionEngine
-  )
-endif()
-
-declare_mlir_python_extension(MLIRPythonExtension.GPUDialectPasses
-  MODULE_NAME _mlirGPUPasses
-  ADD_TO_PARENT MLIRPythonSources.Dialects.gpu
-  ROOT_DIR "${PYTHON_SOURCE_DIR}"
-  SOURCES
-    GPUPasses.cpp
-  PRIVATE_LINK_LIBS
-    LLVMSupport
-  EMBED_CAPI_LINK_LIBS
-    MLIRCAPIGPU
-)
-
-declare_mlir_python_extension(MLIRPythonExtension.LinalgPasses
-  MODULE_NAME _mlirLinalgPasses
-  ADD_TO_PARENT MLIRPythonSources.Dialects.linalg
-  ROOT_DIR "${PYTHON_SOURCE_DIR}"
-  SOURCES
-    LinalgPasses.cpp
-  PRIVATE_LINK_LIBS
-    LLVMSupport
-  EMBED_CAPI_LINK_LIBS
-    MLIRCAPILinalg
-)
-
-declare_mlir_python_extension(MLIRPythonExtension.SparseTensorDialectPasses
-  MODULE_NAME _mlirSparseTensorPasses
-  ADD_TO_PARENT MLIRPythonSources.Dialects.sparse_tensor
-  ROOT_DIR "${PYTHON_SOURCE_DIR}"
-  SOURCES
-    SparseTensorPasses.cpp
-  PRIVATE_LINK_LIBS
-    LLVMSupport
-  EMBED_CAPI_LINK_LIBS
-    MLIRCAPISparseTensor
-)
-
-# TODO: Figure out how to put this in the test tree.
-# This should not be included in the main Python extension. However,
-# putting it into MLIRPythonTestSources along with the dialect declaration
-# above confuses Python module loader when running under lit.
-set(_ADDL_TEST_SOURCES)
-if(MLIR_INCLUDE_TESTS)
-  set(_ADDL_TEST_SOURCES MLIRPythonTestSources)
-  declare_mlir_python_sources(MLIRPythonTestSources)
-  declare_mlir_python_sources(MLIRPythonTestSources.Dialects
-    ADD_TO_PARENT MLIRPythonTestSources)
-
-  # TODO: this uses a tablegen file from the test directory and should be
-  # decoupled from here.
-  declare_mlir_python_sources(
-    MLIRPythonTestSources.Dialects.PythonTest
-    ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/mlir"
-    ADD_TO_PARENT MLIRPythonTestSources.Dialects
-    SOURCES dialects/python_test.py)
-  set(LLVM_TARGET_DEFINITIONS
-    "${MLIR_MAIN_SRC_DIR}/test/python/python_test_ops.td")
-  mlir_tablegen(
-    "dialects/_python_test_ops_gen.py"
-    -gen-python-op-bindings
-    -bind-dialect=python_test)
-  add_public_tablegen_target(PythonTestDialectPyIncGen)
-  declare_mlir_python_sources(
-    MLIRPythonTestSources.Dialects.PythonTest.ops_gen
-    ROOT_DIR "${CMAKE_CURRENT_BINARY_DIR}"
-    ADD_TO_PARENT MLIRPythonTestSources.Dialects.PythonTest
-    SOURCES "dialects/_python_test_ops_gen.py")
-
-  declare_mlir_python_extension(MLIRPythonTestSources.PythonTestExtension
-    MODULE_NAME _mlirPythonTest
-    ADD_TO_PARENT MLIRPythonTestSources.Dialects
-    ROOT_DIR "${MLIR_SOURCE_DIR}/test/python/lib"
-    SOURCES
-      PythonTestModule.cpp
-    PRIVATE_LINK_LIBS
-      LLVMSupport
-    EMBED_CAPI_LINK_LIBS
-      MLIRCAPIPythonTestDialect
-  )
-endif()
-
 ################################################################################
 # Common CAPI dependency DSO.
 # All python extensions must link through one DSO which exports the CAPI, and
@@ -480,7 +156,6 @@ add_mlir_python_common_capi_library(MLIRPythonCAPI
   DECLARED_SOURCES
     MLIRPythonSources
     MLIRPythonExtension.RegisterEverything
-    ${_ADDL_TEST_SOURCES}
 )
 
 ################################################################################
@@ -494,7 +169,6 @@ add_mlir_python_modules(MLIRPythonModules
   DECLARED_SOURCES
     MLIRPythonSources
     MLIRPythonExtension.RegisterEverything
-    ${_ADDL_TEST_SOURCES}
   COMMON_CAPI_LINK_LIBS
     MLIRPythonCAPI
 )
diff --git a/mlir/test/lib/Dialect/Math/CMakeLists.txt b/mlir/test/lib/Dialect/Math/CMakeLists.txt
index 195d392d6ad3..5daca8b55d87 100644
--- a/mlir/test/lib/Dialect/Math/CMakeLists.txt
+++ b/mlir/test/lib/Dialect/Math/CMakeLists.txt
@@ -11,5 +11,4 @@ add_mlir_library(MLIRMathTestPasses
   MLIRPass
   MLIRTransformUtils
   MLIRVectorDialect
-  MLIRX86VectorDialect
   )
-- 
2.25.1

