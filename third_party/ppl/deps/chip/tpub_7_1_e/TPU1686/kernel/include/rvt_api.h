#ifndef RVT_API_H
#define RVT_API_H
#include <inttypes.h>

typedef struct {
  union {
    int32_t dim[4];
    struct {
      uint32_t n;
      uint32_t c;
      uint32_t h;
      uint32_t w;
    };
  };
} array4_t;

typedef enum {
  HW_ALIGN_LAYOUT   = 0,
  CONTINUOUS_LAYOUT = 1,
  ROW_ALIGN_LAYOUT  = 2,
  FREE_LAYOUT       = 3
} LAYOUT_E;

void rvt_cfg_satu(bool sym_satu, bool f_satu);
void rvt_cfg_pad(int pad_mode, array4_t pads, void *val);
void rvt_cfg_insrt(int ins_i_h, int ins_i_w, int ins_k_h, int ins_k_w, void *val);
void rvt_cfg_stencil(int kh, int kw, int sh, int sw, bool krotate, bool do_relu);
void rvt_cfg_lanemask(uint64_t lane_mask);
void rvt_cfg_round_mode(int round_mode);
void rvt_cfg_rsqrt_iter(uint64_t rsqrt_iter);
void rvt_cfg_vlc(bool zero_guard, uint8_t bias0, uint8_t bias1);
void rvt_cfg_dmaidx(uint32_t start_pos, void *val);
void rvt_sync_i(uint64_t rs, uint8_t engine);
void rvt_cfg_pwrstep(uint8_t pwr_step);
void rvt_fence(uint8_t pred, uint8_t succ);
void rvt_parallel(uint8_t en);
void rvt_cfg_quant(uint64_t ts);
void rvt_cfg_kzp(uint64_t ts);
void rvt_cfg_ctrl1(uint64_t rs);
void rvt_cfg_ctrl1_tf32(bool is_tf32);
void rvt_cfg_ctrl1_jump_cnt(uint64_t jump_cnt);
void rvt_cfg_ctrl1_dis_auto_dep_id(bool dis_auto_dep_id);

bool rvt_is_parallel_state();
void rvt_parallel(uint8_t en);
void rvt_auto_dep_id(uint8_t en);
void rvt_max_cmd_num(uint32_t num);

int rvt_get_local_msg_id();
int rvt_get_global_msg_id();
int rvt_get_gdma_filter_res_num();
void rvt_gdma_wait_sdma();
void rvt_sdma_wait_gdma();
void rvt_sync_all();
void rvt_sync_all_gdma();
void rvt_sync_all_tiu();
void rvt_sync_core();
void rvt_sync_core_innner();

void rvt_cfgcr(uint64_t ca, uint64_t rs);
void rvt_cfgtr(uint64_t ta, uint64_t rs);
void rvt_cfgtr_shape(uint64_t ta, uint64_t rs);
void rvt_cfgtr_hwstride(uint64_t ta, uint64_t rs);
void rvt_cfgtr_ncstride(uint64_t ta, uint64_t rs);
void rvt_cfggr(uint64_t ga, uint64_t rs);
void rvt_cfggr_shape(uint64_t ga, uint64_t rs);
void rvt_cfggr_hwstride(uint64_t ga, uint64_t rs);
void rvt_cfggr_ncstride(uint64_t ga, uint64_t rs);
void rvt_cfggr_hwdim(uint64_t ga, uint64_t rs);
void rvt_cfggr_ncdim(uint64_t ga, uint64_t rs);

void rvt_cr(uint64_t ca, int prec, bool sign, void *val);
void rvt_tr(uint64_t ta, int prec, bool sign, uint32_t offset, LAYOUT_E layout, array4_t shape, int *strides);
void rvt_gr(uint64_t ga, int prec, bool sign, uint64_t addr, LAYOUT_E layout, array4_t shape, int *strides);

void rvt_conv(uint64_t out, uint64_t x, uint64_t w, uint64_t bias, uint64_t _rq);
void rvt_conva(uint64_t out, uint64_t x, uint64_t w, uint64_t bias);
void rvt_fconv(uint64_t out, uint64_t x, uint64_t w, uint64_t bias, uint64_t _rq);
void rvt_fconva(uint64_t out, uint64_t x, uint64_t w, uint64_t bias);
void rvt_dwconv(uint64_t out, uint64_t x, uint64_t w, uint64_t bias, uint64_t _rq);
void rvt_fdwconv(uint64_t out, uint64_t x, uint64_t w, uint64_t bias, uint64_t _rq);
void rvt_pool_avg(uint64_t out, uint64_t x, uint64_t w, uint64_t _rq);
void rvt_pool_favg(uint64_t out, uint64_t x, uint64_t w, uint64_t _rq);
void rvt_pool_max(uint64_t out, uint64_t x);
void rvt_pool_min(uint64_t out, uint64_t x);
void rvt_pool_fmax(uint64_t out, uint64_t x);
void rvt_pool_fmin(uint64_t out, uint64_t x);
void rvt_roipool_avg(uint64_t out, uint64_t x, uint64_t w, uint64_t roi, uint64_t _rq);
void rvt_roipool_favg(uint64_t out, uint64_t x, uint64_t w, uint64_t roi, uint64_t _rq);
void rvt_roipool_max(uint64_t out, uint64_t x, uint64_t roi);
void rvt_roipool_min(uint64_t out, uint64_t x, uint64_t roi);
void rvt_roipool_fmax(uint64_t out, uint64_t x, uint64_t roi);
void rvt_roipool_fmin(uint64_t out, uint64_t x, uint64_t roi);
void rvt_mm_nn(uint64_t out, uint64_t x, uint64_t w, uint64_t bias, uint64_t _rq, uint64_t _relu);
void rvt_mm_tn(uint64_t out, uint64_t x, uint64_t w, uint64_t bias, uint64_t _rq, uint64_t _relu);
void rvt_mma_nn(uint64_t out, uint64_t x, uint64_t w, uint64_t bias, uint64_t _relu);
void rvt_mma_tn(uint64_t out, uint64_t x, uint64_t w, uint64_t bias, uint64_t _relu);
void rvt_fmm_nn(uint64_t out, uint64_t x, uint64_t w, uint64_t bias, uint64_t _relu);
void rvt_fmm_tn(uint64_t out, uint64_t x, uint64_t w, uint64_t bias, uint64_t _relu);
void rvt_fmma_nn(uint64_t out, uint64_t x, uint64_t w, uint64_t bias, uint64_t _relu);
void rvt_fmma_tn(uint64_t out, uint64_t x, uint64_t w, uint64_t bias, uint64_t _relu);
void rvt_mm2_nn(uint64_t out, uint64_t x, uint64_t w, uint64_t bias, uint64_t _rq, uint64_t _relu);
void rvt_mm2_nt(uint64_t out, uint64_t x, uint64_t w, uint64_t bias, uint64_t _rq, uint64_t _relu);
void rvt_mm2_tt(uint64_t out, uint64_t x, uint64_t w, uint64_t bias, uint64_t _rq, uint64_t _relu);
void rvt_mm2a_nn(uint64_t out, uint64_t x, uint64_t w, uint64_t bias, uint64_t _relu);
void rvt_mm2a_nt(uint64_t out, uint64_t x, uint64_t w, uint64_t bias, uint64_t _relu);
void rvt_mm2a_tt(uint64_t out, uint64_t x, uint64_t w, uint64_t bias, uint64_t _relu);
void rvt_fmm2_nn(uint64_t out, uint64_t x, uint64_t w, uint64_t bias, uint64_t _rq, uint64_t _relu);
void rvt_fmm2_nt(uint64_t out, uint64_t x, uint64_t w, uint64_t bias, uint64_t _rq, uint64_t _relu);
void rvt_fmm2_tt(uint64_t out, uint64_t x, uint64_t w, uint64_t bias, uint64_t _rq, uint64_t _relu);
void rvt_fmm2a_nn(uint64_t out, uint64_t x, uint64_t w, uint64_t bias, uint64_t _rq, uint64_t _relu);
void rvt_fmm2a_nt(uint64_t out, uint64_t x, uint64_t w, uint64_t bias, uint64_t _rq, uint64_t _relu);
void rvt_fmm2a_tt(uint64_t out, uint64_t x, uint64_t w, uint64_t bias, uint64_t _rq, uint64_t _relu);
void rvt_cmpeq(uint64_t out, uint64_t a, uint64_t b, uint64_t c, uint64_t d);
void rvt_fcmpeq(uint64_t out, uint64_t a, uint64_t b, uint64_t c, uint64_t d);
void rvt_cmpgt(uint64_t out, uint64_t a, uint64_t b, uint64_t c, uint64_t d);
void rvt_fcmpgt(uint64_t out, uint64_t a, uint64_t b, uint64_t c, uint64_t d);
void rvt_cmplt(uint64_t out, uint64_t a, uint64_t b, uint64_t c, uint64_t d);
void rvt_fcmplt(uint64_t out, uint64_t a, uint64_t b, uint64_t c, uint64_t d);
void rvt_srchbin(uint64_t out, uint64_t a, uint64_t b, uint64_t _side);
void rvt_fsrchbin(uint64_t out, uint64_t a, uint64_t b, uint64_t _side);
void rvt_sfu_norm(uint64_t out, uint64_t a);
void rvt_sfu_taylor(uint64_t out, uint64_t a, uint64_t coeff);
void rvt_sfu_rsqrt(uint64_t out, uint64_t a);
void rvt_fmuladd(uint64_t out, uint64_t a, uint64_t b, uint64_t c);
void rvt_fsqradd(uint64_t out, uint64_t a, uint64_t b);
void rvt_fsqrsub(uint64_t out, uint64_t a, uint64_t b);
void rvt_add(uint64_t out, uint64_t a, uint64_t b, uint64_t shift, uint64_t _satu);
void rvt_sub(uint64_t out, uint64_t a, uint64_t b, uint64_t shift, uint64_t _satu);
void rvt_mul(uint64_t out, uint64_t a, uint64_t b, uint64_t shift, uint64_t _satu);
void rvt_mac(uint64_t out, uint64_t a, uint64_t b, uint64_t shift);
void rvt_sel_gt(uint64_t out, uint64_t a, uint64_t b, uint64_t c);
void rvt_sel_eq(uint64_t out, uint64_t a, uint64_t b, uint64_t c);
void rvt_sel_lt(uint64_t out, uint64_t a, uint64_t b, uint64_t c);
void rvt_max(uint64_t out, uint64_t a, uint64_t b);
void rvt_min(uint64_t out, uint64_t a, uint64_t b);
void rvt_and(uint64_t out, uint64_t a, uint64_t b);
void rvt_xor(uint64_t out, uint64_t a, uint64_t b);
void rvt_or(uint64_t out, uint64_t a, uint64_t b);
void rvt_abs(uint64_t out, uint64_t a);
void rvt_clz(uint64_t out, uint64_t a);
void rvt_clo(uint64_t out, uint64_t a);
void rvt_cp(uint64_t out, uint64_t a);
void rvt_not(uint64_t out, uint64_t a);
void rvt_lshr(uint64_t out, uint64_t a, uint64_t shift);
void rvt_ashr(uint64_t out, uint64_t a, uint64_t shift);
void rvt_rshr(uint64_t out, uint64_t a, uint64_t shift);
void rvt_fsel_gt(uint64_t out, uint64_t a, uint64_t b, uint64_t c);
void rvt_fsel_eq(uint64_t out, uint64_t a, uint64_t b, uint64_t c);
void rvt_fsel_lt(uint64_t out, uint64_t a, uint64_t b, uint64_t c);
void rvt_fdiv(uint64_t out, uint64_t a, uint64_t b);
void rvt_fadd(uint64_t out, uint64_t a, uint64_t b);
void rvt_fsub(uint64_t out, uint64_t a, uint64_t b);
void rvt_fmul(uint64_t out, uint64_t a, uint64_t b);
void rvt_fmac(uint64_t out, uint64_t a, uint64_t b);
void rvt_fsubabs(uint64_t out, uint64_t a, uint64_t b);
void rvt_fmax(uint64_t out, uint64_t a, uint64_t b);
void rvt_fmin(uint64_t out, uint64_t a, uint64_t b);
void rvt_fabs(uint64_t out, uint64_t a);
void rvt_cvt_i2i(uint64_t out, uint64_t a);
void rvt_cvt_i2f(uint64_t out, uint64_t a);
void rvt_cvt_f2i(uint64_t out, uint64_t a);
void rvt_cvt_f2f(uint64_t out, uint64_t a);
void rvt_vcmax(uint64_t out, uint64_t a, uint64_t b);
void rvt_vcmin(uint64_t out, uint64_t a, uint64_t b);
void rvt_fvcmax(uint64_t out, uint64_t a, uint64_t b);
void rvt_fvcmin(uint64_t out, uint64_t a, uint64_t b);
void rvt_dq0(uint64_t out, uint64_t a, uint64_t scale);
void rvt_rq0(uint64_t out, uint64_t a, uint64_t scale);
void rvt_dq1(uint64_t out, uint64_t a, uint64_t scale);
void rvt_rq1(uint64_t out, uint64_t a, uint64_t scale);
void rvt_dq2(uint64_t out, uint64_t a, uint64_t scale, uint64_t _gsize);
void rvt_gather_pc(uint64_t out, uint64_t a, uint64_t idx, uint64_t cs, uint64_t _bdlimit);
void rvt_gather2d_pc(uint64_t out, uint64_t a, uint64_t idx, uint64_t cs, uint64_t _bdlimit);
void rvt_scatter_pc(uint64_t out, uint64_t a, uint64_t idx, uint64_t _bdlimit);
void rvt_scatter2d_pc(uint64_t out, uint64_t a, uint64_t idx, uint64_t _bdlimit);
void rvt_gather(uint64_t out, uint64_t a, uint64_t idx, uint64_t cs, uint64_t _bdlimit, uint64_t _hzd);
void rvt_scatter(uint64_t out, uint64_t a, uint64_t idx, uint64_t _bdlimit, uint64_t _hzd);
void rvt_masksel(uint64_t out_cnt, uint64_t out, uint64_t a, uint64_t mask, uint64_t _hzd);
void rvt_nzidx(uint64_t out_cnt, uint64_t out, uint64_t a, uint64_t _hzd);
void rvt_hgatter(uint64_t out, uint64_t a, uint64_t idx, uint64_t cs, uint64_t _bdlimit);
void rvt_hscatter(uint64_t out, uint64_t a, uint64_t idx, uint64_t _bdlimit);
void rvt_trans_cw(uint64_t out, uint64_t a);
void rvt_trans_wc(uint64_t out, uint64_t a);
void rvt_lane_cp(uint64_t out, uint64_t a);
void rvt_lane_bc(uint64_t out, uint64_t a);
void rvt_smem_bc(uint64_t td, uint64_t rs);
void rvt_smem_dist(uint64_t td, uint64_t rs);
void rvt_msgsend(uint64_t rs);
void rvt_msgwait(uint64_t rs);
void rvt_lanemask(uint64_t rs, uint64_t _long_valid);
void rvt_rand_seed(uint64_t rs);
void rvt_rand0(uint64_t out, uint64_t out_state, uint64_t coffset);
void rvt_rand1(uint64_t out, uint64_t out_state, uint64_t in_state);
void rvt_fconvdw(uint64_t out, uint64_t x, uint64_t dy);
void rvt_dma_ld(uint64_t td, uint64_t gs);
void rvt_dma_ldt(uint64_t td, uint64_t gs);
void rvt_dma_ldbc(uint64_t td, uint64_t gs);
void rvt_dma_st(uint64_t gd, uint64_t ts);
void rvt_dma_stt(uint64_t gd, uint64_t ts);
void rvt_dma_cp(uint64_t dst, uint64_t src);
void rvt_dma_nctrans(uint64_t dst, uint64_t src);
void rvt_dma_red(uint64_t gd, uint64_t src, uint64_t _rw, uint64_t _op);
void rvt_dma_fred(uint64_t gd, uint64_t src, uint64_t _rw, uint64_t _op);
void rvt_dma_mld(uint64_t td, uint64_t gs);
void rvt_dma_mldt(uint64_t td, uint64_t gs);
void rvt_dma_mst(uint64_t gd, uint64_t ts);
void rvt_dma_mstt(uint64_t gd, uint64_t ts);
void rvt_dma_scp(uint64_t gd, uint64_t gs);
void rvt_dma_sbc(uint64_t td, uint64_t src);
void rvt_dma_cwtrans(uint64_t dst, uint64_t src);
void rvt_dma_reverse(uint64_t dst, uint64_t src, uint64_t _dim);
void rvt_dma_hgather(uint64_t dst, uint64_t src, uint64_t idx, uint64_t _bigh);
void rvt_dma_hscatter(uint64_t dst, uint64_t src, uint64_t idx, uint64_t _bigh, uint64_t _accu);
void rvt_dma_fhscatter(uint64_t dst, uint64_t src, uint64_t idx, uint64_t _bigh, uint64_t _accu);
void rvt_dma_nzidx(uint64_t dst, uint64_t src);
void rvt_dma_fnzidx(uint64_t dst, uint64_t src);
void rvt_dma_masksel(uint64_t dst, uint64_t src, uint64_t mask, uint64_t _bigmask);
void rvt_dma_fmasksel(uint64_t dst, uint64_t src, uint64_t mask, uint64_t _bigmask);
void rvt_dma_msgsend(uint64_t rs);
void rvt_dma_msgwait(uint64_t rs);
void rvt_dma_flossycmpr(uint64_t gd, uint64_t src);
void rvt_dma_flossydecmpr(uint64_t dst, uint64_t gs);
void rvt_dma_flossycmpr_red(uint64_t gd, uint64_t src, uint64_t _rw, uint64_t _op);
void rvt_dma_flossydecmpr_red(uint64_t dst, uint64_t gs, uint64_t _rw, uint64_t _op);

#endif