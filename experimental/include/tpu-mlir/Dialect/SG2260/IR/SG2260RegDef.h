// ====- sg2260RefDef.cpp - SG2260 register definition ==========================
//
// Copyright (C) 2022 Sophgo Technologies Inc.  All rights reserved.
//
// TPU-MLIR is licensed under the 2-Clause BSD License except for the
// third-party components.
//
// ==============================================================================
//
// automatically generated by /workspace/tpu-mlir/experimental/python/xlsx2regdef.py
// time: 2023-11-07 08:54:36
// this file should not be changed except format.

// reg_def_file: ('SG2260_TPU_TIU_Reg0.6.xlsx', 'GDMA_SG2260_DES_REG.xlsx')

#pragma once
#include <cstdint>

struct CONVRegDef {
  // 1024bits
  uint64_t cmd_short : 1;
  uint64_t op_code : 16;
  uint64_t cmd_id_dep : 24;
  uint64_t tsk_typ : 4;
  uint64_t tsk_eu_typ : 5;
  uint64_t opt_rq : 1;
  uint64_t tsk_opd_num : 2;
  uint64_t pad_mode : 2;
  uint64_t opt_res0_sign : 1;
  uint64_t rsvd0 : 3;
  uint64_t pwr_step : 4;
  uint64_t intr_en : 1;
  uint64_t opt_res_add : 1;
  uint64_t opt_relu : 1;
  uint64_t opt_left_tran : 1;
  uint64_t opt_opd4_const : 1;
  uint64_t opt_kernel_rotate : 1;
  uint64_t opt_opd0_sign : 1;
  uint64_t opt_opd1_sign : 1;
  uint64_t opt_opd2_sign : 1;
  uint64_t opt_res0_prec : 3;
  uint64_t opt_opd0_prec : 3;
  uint64_t opt_opd1_prec : 3;
  uint64_t opt_opd2_prec : 3;
  uint64_t opt_opd0_const : 1;
  uint64_t opt_opd1_const : 1;
  uint64_t opt_opd2_const : 1;
  uint64_t res0_str : 3;
  uint64_t opd0_str : 3;
  uint64_t opd1_str : 3;
  uint64_t opd2_str : 3;
  uint64_t opt_res_add_sign : 1;
  uint64_t rsvd2 : 25;
  uint64_t sym_range : 1;
  uint64_t opt_opd3_const : 1;
  uint64_t opt_opd5_const : 1;
  uint64_t opd0_x_ins0 : 4;
  uint64_t opd0_y_ins0 : 4;
  uint64_t opd1_x_ins0 : 4;
  uint64_t opd1_y_ins0 : 4;
  uint64_t opd0_up_pad : 4;
  uint64_t opd0_dn_pad : 4;
  uint64_t opd0_lf_pad : 4;
  uint64_t opd0_rt_pad : 4;
  uint64_t res_op_x_str : 4;
  uint64_t res_op_y_str : 4;
  uint64_t res0_h_shift : 4;
  uint64_t res0_w_shift : 4;
  uint64_t opd0_h_shift : 4;
  uint64_t opd0_w_shift : 4;
  uint64_t opd1_h_shift : 4;
  uint64_t opd1_w_shift : 4;
  uint64_t tsk_lane_num : 64;
  uint64_t res0_n : 16;
  uint64_t res0_c : 16;
  uint64_t res0_h : 16;
  uint64_t res0_w : 16;
  uint64_t opd0_n : 16;
  uint64_t opd0_c : 16;
  uint64_t opd0_h : 16;
  uint64_t opd0_w : 16;
  uint64_t opd1_n : 16;
  uint64_t opd1_c : 16;
  uint64_t opd1_h : 16;
  uint64_t opd1_w : 16;
  uint64_t res0_n_str : 16;
  uint64_t res0_c_str : 16;
  uint64_t opd0_n_str : 16;
  uint64_t opd0_c_str : 16;
  uint64_t opd1_n_str : 16;
  uint64_t opd1_c_str : 16;
  uint64_t opd2_n_str : 16;
  uint64_t opd2_c_str : 16;
  uint64_t res0_addr : 32;
  uint64_t opd0_addr : 32;
  uint64_t opd1_addr : 32;
  uint64_t opd2_addr : 32;
  uint64_t res0_h_str : 32;
  uint64_t res0_w_str : 32;
  uint64_t opd0_h_str : 32;
  uint64_t opd0_w_str : 32;
  uint64_t opd1_h_str : 32;
  uint64_t opd1_w_str : 32;
  uint64_t opd2_h_str : 32;
  uint64_t opd2_w_str : 32;
  uint64_t res1_addr : 32;
  uint64_t opd3_addr : 32;
  bool operator==(const CONVRegDef &rhs) const { return memcmp(this, &rhs, sizeof(CONVRegDef)); }
};

struct ShortCONVRegDef {
  // 512bits
  uint64_t cmd_short : 1;
  uint64_t sym_range : 1;
  uint64_t opt_opd4_const : 1;
  uint64_t opt_opd5_const : 1;
  uint64_t opt_relu : 1;
  uint64_t opt_rq : 1;
  uint64_t opd2_n_str : 3;
  uint64_t opt_opd1_prec : 3;
  uint64_t op_code : 5;
  uint64_t cmd_id_dep : 24;
  uint64_t tsk_typ : 4;
  uint64_t tsk_eu_typ : 5;
  uint64_t opt_opd0_sign : 1;
  uint64_t opt_opd1_sign : 1;
  uint64_t opt_opd2_sign : 1;
  uint64_t pad_mode : 2;
  uint64_t opt_res0_sign : 1;
  uint64_t opt_opd2_prec : 3;
  uint64_t pwr_step : 4;
  uint64_t opt_res_add : 1;
  uint64_t opt_kernel_rotate : 1;
  uint64_t opt_res0_prec : 3;
  uint64_t opt_opd0_prec : 3;
  uint64_t opt_opd1_const : 1;
  uint64_t opt_opd2_const : 1;
  uint64_t opd0_up_pad : 4;
  uint64_t opd0_dn_pad : 4;
  uint64_t opd0_lf_pad : 4;
  uint64_t opd0_rt_pad : 4;
  uint64_t res_op_x_str : 4;
  uint64_t res_op_y_str : 4;
  uint64_t opt_opd3_const : 1;
  uint64_t opd0_str : 3;
  uint64_t res0_addr : 26;
  uint64_t intr_en : 1;
  uint64_t opd0_x_ins0 : 4;
  uint64_t opd0_y_ins0 : 4;
  uint64_t opd1_x_ins0 : 4;
  uint64_t opd1_y_ins0 : 4;
  uint64_t opd0_n_str : 16;
  uint64_t res0_n : 16;
  uint64_t res0_c : 16;
  uint64_t res0_h : 16;
  uint64_t res0_w : 16;
  uint64_t opd0_c : 16;
  uint64_t opd0_h : 16;
  uint64_t opd0_w : 16;
  uint64_t opd1_h : 16;
  uint64_t opd1_w : 16;
  uint64_t opd0_c_str : 16;
  uint64_t opd0_addr : 32;
  uint64_t opd1_addr : 32;
  uint64_t opd2_addr : 32;
  uint64_t res1_addr : 32;
  uint64_t opd3_addr : 32;
  uint64_t opd0_h_str : 16;
  uint64_t opd0_w_str : 16;
  bool operator==(const ShortCONVRegDef &rhs) const { return memcmp(this, &rhs, sizeof(ShortCONVRegDef)); }
};

struct CONVBWRegDef {
  // 1024bits
  uint64_t cmd_short : 1;
  uint64_t op_code : 16;
  uint64_t cmd_id_dep : 24;
  uint64_t tsk_typ : 4;
  uint64_t tsk_eu_typ : 5;
  uint64_t opt_rq : 1;
  uint64_t tsk_opd_num : 2;
  uint64_t pad_mode : 2;
  uint64_t opt_res0_sign : 1;
  uint64_t rsvd0 : 3;
  uint64_t pwr_step : 4;
  uint64_t intr_en : 1;
  uint64_t opt_res_add : 1;
  uint64_t opt_relu : 1;
  uint64_t opt_left_tran : 1;
  uint64_t opt_opd4_const : 1;
  uint64_t opt_kernel_rotate : 1;
  uint64_t opt_opd0_sign : 1;
  uint64_t opt_opd1_sign : 1;
  uint64_t opt_opd2_sign : 1;
  uint64_t opt_res0_prec : 3;
  uint64_t opt_opd0_prec : 3;
  uint64_t opt_opd1_prec : 3;
  uint64_t opt_opd2_prec : 3;
  uint64_t opt_opd0_const : 1;
  uint64_t opt_opd1_const : 1;
  uint64_t opt_opd2_const : 1;
  uint64_t res0_str : 3;
  uint64_t opd0_str : 3;
  uint64_t opd1_str : 3;
  uint64_t opd2_str : 3;
  uint64_t opt_res_add_sign : 1;
  uint64_t rsvd2 : 25;
  uint64_t sym_range : 1;
  uint64_t opt_opd3_const : 1;
  uint64_t opt_opd5_const : 1;
  uint64_t opd0_x_ins0 : 4;
  uint64_t opd0_y_ins0 : 4;
  uint64_t opd1_x_ins0 : 4;
  uint64_t opd1_y_ins0 : 4;
  uint64_t opd0_up_pad : 4;
  uint64_t opd0_dn_pad : 4;
  uint64_t opd0_lf_pad : 4;
  uint64_t opd0_rt_pad : 4;
  uint64_t res_op_x_str : 4;
  uint64_t res_op_y_str : 4;
  uint64_t res0_h_shift : 4;
  uint64_t res0_w_shift : 4;
  uint64_t opd0_h_shift : 4;
  uint64_t opd0_w_shift : 4;
  uint64_t opd1_h_shift : 4;
  uint64_t opd1_w_shift : 4;
  uint64_t tsk_lane_num : 64;
  uint64_t res0_n : 16;
  uint64_t res0_c : 16;
  uint64_t res0_h : 16;
  uint64_t res0_w : 16;
  uint64_t opd0_n : 16;
  uint64_t opd0_c : 16;
  uint64_t opd0_h : 16;
  uint64_t opd0_w : 16;
  uint64_t opd1_n : 16;
  uint64_t opd1_c : 16;
  uint64_t opd1_h : 16;
  uint64_t opd1_w : 16;
  uint64_t res0_n_str : 16;
  uint64_t res0_c_str : 16;
  uint64_t opd0_n_str : 16;
  uint64_t opd0_c_str : 16;
  uint64_t opd1_n_str : 16;
  uint64_t opd1_c_str : 16;
  uint64_t opd2_n_str : 16;
  uint64_t opd2_c_str : 16;
  uint64_t res0_addr : 32;
  uint64_t opd0_addr : 32;
  uint64_t opd1_addr : 32;
  uint64_t opd2_addr : 32;
  uint64_t res0_h_str : 32;
  uint64_t res0_w_str : 32;
  uint64_t opd0_h_str : 32;
  uint64_t opd0_w_str : 32;
  uint64_t opd1_h_str : 32;
  uint64_t opd1_w_str : 32;
  uint64_t opd2_h_str : 32;
  uint64_t opd2_w_str : 32;
  uint64_t res1_addr : 32;
  uint64_t opd3_addr : 32;
  bool operator==(const CONVBWRegDef &rhs) const { return memcmp(this, &rhs, sizeof(CONVBWRegDef)); }
};

struct ShortCONVBWRegDef {
  // 512bits
  uint64_t cmd_short : 1;
  uint64_t sym_range : 1;
  uint64_t opt_opd4_const : 1;
  uint64_t opt_opd5_const : 1;
  uint64_t opt_relu : 1;
  uint64_t opt_rq : 1;
  uint64_t opd2_n_str : 3;
  uint64_t opt_opd1_prec : 3;
  uint64_t op_code : 5;
  uint64_t cmd_id_dep : 24;
  uint64_t tsk_typ : 4;
  uint64_t tsk_eu_typ : 5;
  uint64_t opt_opd0_sign : 1;
  uint64_t opt_opd1_sign : 1;
  uint64_t opt_opd2_sign : 1;
  uint64_t pad_mode : 2;
  uint64_t opt_res0_sign : 1;
  uint64_t opt_opd2_prec : 3;
  uint64_t pwr_step : 4;
  uint64_t opt_res_add : 1;
  uint64_t opt_kernel_rotate : 1;
  uint64_t opt_res0_prec : 3;
  uint64_t opt_opd0_prec : 3;
  uint64_t opt_opd1_const : 1;
  uint64_t opt_opd2_const : 1;
  uint64_t opd0_up_pad : 4;
  uint64_t opd0_dn_pad : 4;
  uint64_t opd0_lf_pad : 4;
  uint64_t opd0_rt_pad : 4;
  uint64_t res_op_x_str : 4;
  uint64_t res_op_y_str : 4;
  uint64_t opt_opd3_const : 1;
  uint64_t opd0_str : 3;
  uint64_t res0_addr : 26;
  uint64_t intr_en : 1;
  uint64_t opd0_x_ins0 : 4;
  uint64_t opd0_y_ins0 : 4;
  uint64_t opd1_x_ins0 : 4;
  uint64_t opd1_y_ins0 : 4;
  uint64_t opd0_n_str : 16;
  uint64_t res0_n : 16;
  uint64_t res0_c : 16;
  uint64_t res0_h : 16;
  uint64_t res0_w : 16;
  uint64_t opd0_c : 16;
  uint64_t opd0_h : 16;
  uint64_t opd0_w : 16;
  uint64_t opd1_h : 16;
  uint64_t opd1_w : 16;
  uint64_t opd0_c_str : 16;
  uint64_t opd0_addr : 32;
  uint64_t opd1_addr : 32;
  uint64_t opd2_addr : 32;
  uint64_t res1_addr : 32;
  uint64_t opd3_addr : 32;
  uint64_t opd0_h_str : 16;
  uint64_t opd0_w_str : 16;
  bool operator==(const ShortCONVBWRegDef &rhs) const { return memcmp(this, &rhs, sizeof(ShortCONVBWRegDef)); }
};

struct MMRegDef {
  // 1024bits
  uint64_t cmd_short : 1;
  uint64_t op_code : 16;
  uint64_t cmd_id_dep : 24;
  uint64_t tsk_typ : 4;
  uint64_t tsk_eu_typ : 5;
  uint64_t opt_rq : 1;
  uint64_t tsk_opd_num : 2;
  uint64_t rsvd1 : 2;
  uint64_t opt_res0_sign : 1;
  uint64_t rsvd0 : 3;
  uint64_t pwr_step : 4;
  uint64_t intr_en : 1;
  uint64_t opt_res_add : 1;
  uint64_t opt_relu : 1;
  uint64_t opt_left_tran : 1;
  uint64_t opt_opd4_const : 1;
  uint64_t opt_kernel_rotate : 1;
  uint64_t opt_opd0_sign : 1;
  uint64_t opt_opd1_sign : 1;
  uint64_t opt_opd2_sign : 1;
  uint64_t opt_res0_prec : 3;
  uint64_t opt_opd0_prec : 3;
  uint64_t opt_opd1_prec : 3;
  uint64_t opt_opd2_prec : 3;
  uint64_t opt_opd0_const : 1;
  uint64_t opt_opd1_const : 1;
  uint64_t opt_opd2_const : 1;
  uint64_t res0_str : 3;
  uint64_t opd0_str : 3;
  uint64_t opd1_str : 3;
  uint64_t opd2_str : 3;
  uint64_t opt_res_add_sign : 1;
  uint64_t rsvd2 : 25;
  uint64_t sym_range : 1;
  uint64_t opt_opd3_const : 1;
  uint64_t opt_opd5_const : 1;
  uint64_t opd0_x_ins0 : 4;
  uint64_t opd0_y_ins0 : 4;
  uint64_t opd1_x_ins0 : 4;
  uint64_t opd1_y_ins0 : 4;
  uint64_t opd0_up_pad : 4;
  uint64_t opd0_dn_pad : 4;
  uint64_t opd0_lf_pad : 4;
  uint64_t opd0_rt_pad : 4;
  uint64_t res_op_x_str : 4;
  uint64_t res_op_y_str : 4;
  uint64_t res0_h_shift : 4;
  uint64_t res0_w_shift : 4;
  uint64_t opd0_h_shift : 4;
  uint64_t opd0_w_shift : 4;
  uint64_t opd1_h_shift : 4;
  uint64_t opd1_w_shift : 4;
  uint64_t tsk_lane_num : 64;
  uint64_t res0_n : 16;
  uint64_t res0_c : 16;
  uint64_t res0_h : 16;
  uint64_t res0_w : 16;
  uint64_t opd0_n : 16;
  uint64_t opd0_c : 16;
  uint64_t opd0_h : 16;
  uint64_t opd0_w : 16;
  uint64_t opd1_n : 16;
  uint64_t opd1_c : 16;
  uint64_t opd1_h : 16;
  uint64_t opd1_w : 16;
  uint64_t res0_n_str : 16;
  uint64_t res0_c_str : 16;
  uint64_t opd0_n_str : 16;
  uint64_t opd0_c_str : 16;
  uint64_t opd1_n_str : 16;
  uint64_t opd1_c_str : 16;
  uint64_t opd2_n_str : 16;
  uint64_t opd2_c_str : 16;
  uint64_t res0_addr : 32;
  uint64_t opd0_addr : 32;
  uint64_t opd1_addr : 32;
  uint64_t opd2_addr : 32;
  uint64_t res0_h_str : 32;
  uint64_t res0_w_str : 32;
  uint64_t opd0_h_str : 32;
  uint64_t opd0_w_str : 32;
  uint64_t opd1_h_str : 32;
  uint64_t opd1_w_str : 32;
  uint64_t opd2_h_str : 32;
  uint64_t opd2_w_str : 32;
  uint64_t res1_addr : 32;
  uint64_t opd3_addr : 32;
  bool operator==(const MMRegDef &rhs) const { return memcmp(this, &rhs, sizeof(MMRegDef)); }
};

struct ShortMMRegDef {
  // 384bits
  uint64_t cmd_short : 1;
  uint64_t sym_range : 1;
  uint64_t rsvd0 : 1;
  uint64_t rsvd1 : 1;
  uint64_t opt_relu : 1;
  uint64_t opt_rq : 1;
  uint64_t rsvd2 : 3;
  uint64_t rsvd3 : 8;
  uint64_t cmd_id_dep : 24;
  uint64_t tsk_typ : 4;
  uint64_t tsk_eu_typ : 5;
  uint64_t opt_res_add : 1;
  uint64_t opt_left_tran : 1;
  uint64_t opt_opd0_const : 1;
  uint64_t opt_opd2_const : 1;
  uint64_t rsvd4 : 1;
  uint64_t opt_res0_sign : 1;
  uint64_t rsvd5 : 3;
  uint64_t pwr_step : 4;
  uint64_t intr_en : 1;
  uint64_t opt_opd0_sign : 1;
  uint64_t opt_opd1_sign : 1;
  uint64_t opt_opd2_sign : 1;
  uint64_t opt_res0_prec : 3;
  uint64_t opt_opd0_prec : 3;
  uint64_t opd2_n_str : 3;
  uint64_t rsvd6 : 20;
  uint64_t rsvd7 : 16;
  uint64_t res0_c : 16;
  uint64_t res0_w : 16;
  uint64_t opd0_n : 16;
  uint64_t opd0_c : 16;
  uint64_t opd0_w : 16;
  uint64_t rsvd8 : 16;
  uint64_t opd1_w : 16;
  uint64_t res0_addr : 32;
  uint64_t opd0_addr : 32;
  uint64_t opd1_addr : 32;
  uint64_t opd2_addr : 32;
  uint64_t rsvd9 : 32;
  bool operator==(const ShortMMRegDef &rhs) const { return memcmp(this, &rhs, sizeof(ShortMMRegDef)); }
};

struct MM2RegDef {
  // 1024bits
  uint64_t cmd_short : 1;
  uint64_t op_code : 16;
  uint64_t cmd_id_dep : 24;
  uint64_t tsk_typ : 4;
  uint64_t tsk_eu_typ : 5;
  uint64_t opt_rq : 1;
  uint64_t tsk_opd_num : 2;
  uint64_t pad_mode : 2;
  uint64_t opt_res0_sign : 1;
  uint64_t rsvd0 : 3;
  uint64_t pwr_step : 4;
  uint64_t intr_en : 1;
  uint64_t opt_res_add : 1;
  uint64_t opt_relu : 1;
  uint64_t opt_left_tran : 1;
  uint64_t opt_opd4_const : 1;
  uint64_t opt_kernel_rotate : 1;
  uint64_t opt_opd0_sign : 1;
  uint64_t opt_opd1_sign : 1;
  uint64_t opt_opd2_sign : 1;
  uint64_t opt_res0_prec : 3;
  uint64_t opt_opd0_prec : 3;
  uint64_t opt_opd1_prec : 3;
  uint64_t opt_opd2_prec : 3;
  uint64_t opt_opd0_const : 1;
  uint64_t opt_opd1_const : 1;
  uint64_t opt_opd2_const : 1;
  uint64_t res0_str : 3;
  uint64_t opd0_str : 3;
  uint64_t opd1_str : 3;
  uint64_t opd2_str : 3;
  uint64_t opt_res_add_sign : 1;
  uint64_t rsvd2 : 25;
  uint64_t sym_range : 1;
  uint64_t opt_opd3_const : 1;
  uint64_t opt_opd5_const : 1;
  uint64_t opd0_x_ins0 : 4;
  uint64_t opd0_y_ins0 : 4;
  uint64_t opd1_x_ins0 : 4;
  uint64_t opd1_y_ins0 : 4;
  uint64_t opd0_up_pad : 4;
  uint64_t opd0_dn_pad : 4;
  uint64_t opd0_lf_pad : 4;
  uint64_t opd0_rt_pad : 4;
  uint64_t res_op_x_str : 4;
  uint64_t res_op_y_str : 4;
  uint64_t res0_h_shift : 4;
  uint64_t res0_w_shift : 4;
  uint64_t opd0_h_shift : 4;
  uint64_t opd0_w_shift : 4;
  uint64_t opd1_h_shift : 4;
  uint64_t opd1_w_shift : 4;
  uint64_t tsk_lane_num : 64;
  uint64_t res0_n : 16;
  uint64_t res0_c : 16;
  uint64_t res0_h : 16;
  uint64_t res0_w : 16;
  uint64_t opd0_n : 16;
  uint64_t opd0_c : 16;
  uint64_t opd0_h : 16;
  uint64_t opd0_w : 16;
  uint64_t opd1_n : 16;
  uint64_t opd1_c : 16;
  uint64_t opd1_h : 16;
  uint64_t opd1_w : 16;
  uint64_t res0_n_str : 16;
  uint64_t res0_c_str : 16;
  uint64_t opd0_n_str : 16;
  uint64_t opd0_c_str : 16;
  uint64_t opd1_n_str : 16;
  uint64_t opd1_c_str : 16;
  uint64_t opd2_n_str : 16;
  uint64_t opd2_c_str : 16;
  uint64_t res0_addr : 32;
  uint64_t opd0_addr : 32;
  uint64_t opd1_addr : 32;
  uint64_t opd2_addr : 32;
  uint64_t res0_h_str : 32;
  uint64_t res0_w_str : 32;
  uint64_t opd0_h_str : 32;
  uint64_t opd0_w_str : 32;
  uint64_t opd1_h_str : 32;
  uint64_t opd1_w_str : 32;
  uint64_t opd2_h_str : 32;
  uint64_t opd2_w_str : 32;
  uint64_t res1_addr : 32;
  uint64_t opd3_addr : 32;
  bool operator==(const MM2RegDef &rhs) const { return memcmp(this, &rhs, sizeof(MM2RegDef)); }
};

struct ShortMM2RegDef {
  // 256bits
  uint64_t cmd_short : 1;
  uint64_t sym_range : 1;
  uint64_t opt_opd4_const : 1;
  uint64_t opt_opd5_const : 1;
  uint64_t opt_relu : 1;
  uint64_t opt_rq : 1;
  uint64_t opt_opd2_prec : 3;
  uint64_t opt_opd1_prec : 3;
  uint64_t rsvd1 : 2;
  uint64_t opt_opd2_sign : 1;
  uint64_t op_code : 2;
  uint64_t cmd_id_dep : 24;
  uint64_t tsk_typ : 4;
  uint64_t tsk_eu_typ : 5;
  uint64_t opt_opd0_sign : 1;
  uint64_t opt_opd1_sign : 1;
  uint64_t opt_res0_prec : 3;
  uint64_t opt_res0_sign : 1;
  uint64_t opd2_n_str : 3;
  uint64_t pwr_step : 4;
  uint64_t opt_opd2_const : 1;
  uint64_t res0_c : 16;
  uint64_t res0_w : 16;
  uint64_t opd1_c : 16;
  uint64_t opd1_w : 16;
  uint64_t opt_opd0_prec : 3;
  uint64_t opt_opd0_const : 1;
  uint64_t opt_opd1_const : 1;
  uint64_t opt_res_add : 1;
  uint64_t res0_addr : 25;
  uint64_t intr_en : 1;
  uint64_t opd0_addr : 32;
  uint64_t opd1_addr : 32;
  uint64_t opd2_addr : 32;
  bool operator==(const ShortMM2RegDef &rhs) const { return memcmp(this, &rhs, sizeof(ShortMM2RegDef)); }
};

struct CMPRegDef {
  // 1024bits
  uint64_t cmd_short : 1;
  uint64_t op_code : 16;
  uint64_t cmd_id_dep : 24;
  uint64_t tsk_typ : 4;
  uint64_t tsk_eu_typ : 5;
  uint64_t opt_rq : 1;
  uint64_t tsk_opd_num : 2;
  uint64_t pad_mode : 2;
  uint64_t rsvd0 : 1;
  uint64_t rsvd0_0 : 3;
  uint64_t pwr_step : 4;
  uint64_t intr_en : 1;
  uint64_t opt_res_add : 1;
  uint64_t opt_relu : 1;
  uint64_t opt_left_tran : 1;
  uint64_t opt_opd4_const : 1;
  uint64_t opt_kernel_rotate : 1;
  uint64_t opt_opd0_sign : 1;
  uint64_t opt_opd1_sign : 1;
  uint64_t opt_opd2_sign : 1;
  uint64_t opt_res0_prec : 3;
  uint64_t opt_opd0_prec : 3;
  uint64_t opt_opd1_prec : 3;
  uint64_t opt_opd2_prec : 3;
  uint64_t opt_opd0_const : 1;
  uint64_t opt_opd1_const : 1;
  uint64_t opt_opd2_const : 1;
  uint64_t res0_str : 3;
  uint64_t opd0_str : 3;
  uint64_t opd1_str : 3;
  uint64_t opd2_str : 3;
  uint64_t opt_res_add_sign : 1;
  uint64_t rsvd2 : 25;
  uint64_t sym_range : 1;
  uint64_t opt_opd3_const : 1;
  uint64_t opt_opd5_const : 1;
  uint64_t opd0_x_ins0 : 4;
  uint64_t opd0_y_ins0 : 4;
  uint64_t opd1_x_ins0 : 4;
  uint64_t opd1_y_ins0 : 4;
  uint64_t opd0_up_pad : 4;
  uint64_t opd0_dn_pad : 4;
  uint64_t opd0_lf_pad : 4;
  uint64_t opd0_rt_pad : 4;
  uint64_t res_op_x_str : 4;
  uint64_t res_op_y_str : 4;
  uint64_t res0_h_shift : 4;
  uint64_t res0_w_shift : 4;
  uint64_t opd0_h_shift : 4;
  uint64_t opd0_w_shift : 4;
  uint64_t opd1_h_shift : 4;
  uint64_t opd1_w_shift : 4;
  uint64_t tsk_lane_num : 64;
  uint64_t res0_n : 16;
  uint64_t res0_c : 16;
  uint64_t res0_h : 16;
  uint64_t res0_w : 16;
  uint64_t opd0_n : 16;
  uint64_t opd0_c : 16;
  uint64_t opd0_h : 16;
  uint64_t opd0_w : 16;
  uint64_t opd1_n : 16;
  uint64_t opd1_c : 16;
  uint64_t opd1_h : 16;
  uint64_t opd1_w : 16;
  uint64_t res0_n_str : 16;
  uint64_t res0_c_str : 16;
  uint64_t opd0_n_str : 16;
  uint64_t opd0_c_str : 16;
  uint64_t opd1_n_str : 16;
  uint64_t opd1_c_str : 16;
  uint64_t opd2_n_str : 16;
  uint64_t opd2_c_str : 16;
  uint64_t res0_addr : 32;
  uint64_t opd0_addr : 32;
  uint64_t opd1_addr : 32;
  uint64_t opd2_addr : 32;
  uint64_t res0_h_str : 32;
  uint64_t res0_w_str : 32;
  uint64_t opd0_h_str : 32;
  uint64_t opd0_w_str : 32;
  uint64_t opd1_h_str : 32;
  uint64_t opd1_w_str : 32;
  uint64_t opd2_h_str : 32;
  uint64_t opd2_w_str : 32;
  uint64_t res1_addr : 32;
  uint64_t opd3_addr : 32;
  bool operator==(const CMPRegDef &rhs) const { return memcmp(this, &rhs, sizeof(CMPRegDef)); }
};

struct ShortCMPRegDef {
  // 384bits
  uint64_t cmd_short : 1;
  uint64_t op_code : 16;
  uint64_t cmd_id_dep : 24;
  uint64_t tsk_typ : 4;
  uint64_t tsk_eu_typ : 5;
  uint64_t opt_opd0_const : 1;
  uint64_t opt_opd1_const : 1;
  uint64_t opt_opd2_const : 1;
  uint64_t opt_opd3_const : 1;
  uint64_t rsvd0 : 2;
  uint64_t rsvd1 : 3;
  uint64_t pwr_step : 4;
  uint64_t intr_en : 1;
  uint64_t opt_opd0_prec : 3;
  uint64_t opt_opd2_prec : 3;
  uint64_t opd0_str : 3;
  uint64_t opd1_str : 3;
  uint64_t rsvd2 : 50;
  uint64_t opt_opd2_sign : 1;
  uint64_t opt_opd0_sign : 1;
  uint64_t res0_n : 16;
  uint64_t res0_c : 16;
  uint64_t res0_h : 16;
  uint64_t res0_w : 16;
  uint64_t res0_addr : 32;
  uint64_t res1_addr : 32;
  uint64_t opd0_addr : 32;
  uint64_t opd1_addr : 32;
  uint64_t opd2_addr : 32;
  uint64_t opd3_addr : 32;
  bool operator==(const ShortCMPRegDef &rhs) const { return memcmp(this, &rhs, sizeof(ShortCMPRegDef)); }
};

struct SFURegDef {
  // 1024bits
  uint64_t cmd_short : 1;
  uint64_t op_code : 16;
  uint64_t cmd_id_dep : 24;
  uint64_t tsk_typ : 4;
  uint64_t tsk_eu_typ : 5;
  uint64_t opt_rq : 1;
  uint64_t tsk_opd_num : 2;
  uint64_t pad_mode : 2;
  uint64_t rsvd0 : 1;
  uint64_t rsvd0_0 : 3;
  uint64_t pwr_step : 4;
  uint64_t intr_en : 1;
  uint64_t opt_res_add : 1;
  uint64_t opt_relu : 1;
  uint64_t opt_left_tran : 1;
  uint64_t opt_opd4_const : 1;
  uint64_t opt_kernel_rotate : 1;
  uint64_t opt_opd0_sign : 1;
  uint64_t opt_opd1_sign : 1;
  uint64_t opt_opd2_sign : 1;
  uint64_t opt_res0_prec : 3;
  uint64_t opt_opd0_prec : 3;
  uint64_t opt_opd1_prec : 3;
  uint64_t opt_opd2_prec : 3;
  uint64_t opt_opd0_const : 1;
  uint64_t opt_opd1_const : 1;
  uint64_t opt_opd2_const : 1;
  uint64_t res0_str : 3;
  uint64_t opd0_str : 3;
  uint64_t opd1_str : 3;
  uint64_t opd2_str : 3;
  uint64_t opt_res_add_sign : 1;
  uint64_t rsvd2 : 25;
  uint64_t sym_range : 1;
  uint64_t opt_opd3_const : 1;
  uint64_t opt_opd5_const : 1;
  uint64_t opd0_x_ins0 : 4;
  uint64_t opd0_y_ins0 : 4;
  uint64_t opd1_x_ins0 : 4;
  uint64_t opd1_y_ins0 : 4;
  uint64_t opd0_up_pad : 4;
  uint64_t opd0_dn_pad : 4;
  uint64_t opd0_lf_pad : 4;
  uint64_t opd0_rt_pad : 4;
  uint64_t res_op_x_str : 4;
  uint64_t res_op_y_str : 4;
  uint64_t res0_h_shift : 4;
  uint64_t res0_w_shift : 4;
  uint64_t opd0_h_shift : 4;
  uint64_t opd0_w_shift : 4;
  uint64_t opd1_h_shift : 4;
  uint64_t opd1_w_shift : 4;
  uint64_t tsk_lane_num : 64;
  uint64_t res0_n : 16;
  uint64_t res0_c : 16;
  uint64_t res0_h : 16;
  uint64_t res0_w : 16;
  uint64_t opd0_n : 16;
  uint64_t opd0_c : 16;
  uint64_t opd0_h : 16;
  uint64_t opd0_w : 16;
  uint64_t opd1_n : 16;
  uint64_t opd1_c : 16;
  uint64_t opd1_h : 16;
  uint64_t opd1_w : 16;
  uint64_t res0_n_str : 16;
  uint64_t res0_c_str : 16;
  uint64_t opd0_n_str : 16;
  uint64_t opd0_c_str : 16;
  uint64_t opd1_n_str : 16;
  uint64_t opd1_c_str : 16;
  uint64_t opd2_n_str : 16;
  uint64_t opd2_c_str : 16;
  uint64_t res0_addr : 32;
  uint64_t opd0_addr : 32;
  uint64_t opd1_addr : 32;
  uint64_t opd2_addr : 32;
  uint64_t res0_h_str : 32;
  uint64_t res0_w_str : 32;
  uint64_t opd0_h_str : 32;
  uint64_t opd0_w_str : 32;
  uint64_t opd1_h_str : 32;
  uint64_t opd1_w_str : 32;
  uint64_t opd2_h_str : 32;
  uint64_t opd2_w_str : 32;
  uint64_t res1_addr : 32;
  uint64_t opd3_addr : 32;
  bool operator==(const SFURegDef &rhs) const { return memcmp(this, &rhs, sizeof(SFURegDef)); }
};

struct ShortSFURegDef {
  // 256bits
  uint64_t cmd_short : 1;
  uint64_t op_code : 16;
  uint64_t cmd_id_dep : 24;
  uint64_t tsk_typ : 4;
  uint64_t tsk_eu_typ : 5;
  uint64_t rsvd0 : 6;
  uint64_t rsvd1 : 3;
  uint64_t pwr_step : 4;
  uint64_t intr_en : 1;
  uint64_t opt_res0_prec : 3;
  uint64_t opt_opd0_prec : 3;
  uint64_t opd2_n_str : 2;
  uint64_t rsvd2 : 8;
  uint64_t res0_n : 16;
  uint64_t res0_c : 16;
  uint64_t res0_h : 16;
  uint64_t res0_w : 16;
  uint64_t opd1_n : 16;
  uint64_t res0_addr : 32;
  uint64_t opd0_addr : 32;
  uint64_t opd1_addr : 32;
  bool operator==(const ShortSFURegDef &rhs) const { return memcmp(this, &rhs, sizeof(ShortSFURegDef)); }
};

struct LINRegDef {
  // 1024bits
  uint64_t cmd_short : 1;
  uint64_t op_code : 16;
  uint64_t cmd_id_dep : 24;
  uint64_t tsk_typ : 4;
  uint64_t tsk_eu_typ : 5;
  uint64_t opt_rq : 1;
  uint64_t tsk_opd_num : 2;
  uint64_t pad_mode : 2;
  uint64_t opt_res0_sign : 1;
  uint64_t rsvd0 : 3;
  uint64_t pwr_step : 4;
  uint64_t intr_en : 1;
  uint64_t opt_res_add : 1;
  uint64_t opt_relu : 1;
  uint64_t opt_left_tran : 1;
  uint64_t opt_opd4_const : 1;
  uint64_t opt_kernel_rotate : 1;
  uint64_t opt_opd0_sign : 1;
  uint64_t opt_opd1_sign : 1;
  uint64_t opt_opd2_sign : 1;
  uint64_t opt_res0_prec : 3;
  uint64_t opt_opd0_prec : 3;
  uint64_t opt_opd1_prec : 3;
  uint64_t opt_opd2_prec : 3;
  uint64_t opt_opd0_const : 1;
  uint64_t opt_opd1_const : 1;
  uint64_t opt_opd2_const : 1;
  uint64_t res0_str : 3;
  uint64_t opd0_str : 3;
  uint64_t opd1_str : 3;
  uint64_t opd2_str : 3;
  uint64_t opt_res_add_sign : 1;
  uint64_t rsvd2 : 25;
  uint64_t sym_range : 1;
  uint64_t opt_opd3_const : 1;
  uint64_t opt_opd5_const : 1;
  uint64_t opd0_x_ins0 : 4;
  uint64_t opd0_y_ins0 : 4;
  uint64_t opd1_x_ins0 : 4;
  uint64_t opd1_y_ins0 : 4;
  uint64_t opd0_up_pad : 4;
  uint64_t opd0_dn_pad : 4;
  uint64_t opd0_lf_pad : 4;
  uint64_t opd0_rt_pad : 4;
  uint64_t res_op_x_str : 4;
  uint64_t res_op_y_str : 4;
  uint64_t res0_h_shift : 4;
  uint64_t res0_w_shift : 4;
  uint64_t opd0_h_shift : 4;
  uint64_t opd0_w_shift : 4;
  uint64_t opd1_h_shift : 4;
  uint64_t opd1_w_shift : 4;
  uint64_t tsk_lane_num : 64;
  uint64_t res0_n : 16;
  uint64_t res0_c : 16;
  uint64_t res0_h : 16;
  uint64_t res0_w : 16;
  uint64_t opd0_n : 16;
  uint64_t opd0_c : 16;
  uint64_t opd0_h : 16;
  uint64_t opd0_w : 16;
  uint64_t opd1_n : 16;
  uint64_t opd1_c : 16;
  uint64_t opd1_h : 16;
  uint64_t opd1_w : 16;
  uint64_t res0_n_str : 16;
  uint64_t res0_c_str : 16;
  uint64_t opd0_n_str : 16;
  uint64_t opd0_c_str : 16;
  uint64_t opd1_n_str : 16;
  uint64_t opd1_c_str : 16;
  uint64_t opd2_n_str : 16;
  uint64_t opd2_c_str : 16;
  uint64_t res0_addr : 32;
  uint64_t opd0_addr : 32;
  uint64_t opd1_addr : 32;
  uint64_t opd2_addr : 32;
  uint64_t res0_h_str : 32;
  uint64_t res0_w_str : 32;
  uint64_t opd0_h_str : 32;
  uint64_t opd0_w_str : 32;
  uint64_t opd1_h_str : 32;
  uint64_t opd1_w_str : 32;
  uint64_t opd2_h_str : 32;
  uint64_t opd2_w_str : 32;
  uint64_t res1_addr : 32;
  uint64_t opd3_addr : 32;
  bool operator==(const LINRegDef &rhs) const { return memcmp(this, &rhs, sizeof(LINRegDef)); }
};

struct ShortLINRegDef {
  // 256bits
  uint64_t cmd_short : 1;
  uint64_t op_code : 16;
  uint64_t cmd_id_dep : 24;
  uint64_t tsk_typ : 4;
  uint64_t tsk_eu_typ : 5;
  uint64_t opt_opd1_const : 1;
  uint64_t opt_opd2_const : 1;
  uint64_t opt_res0_prec : 3;
  uint64_t opd0_sign : 1;
  uint64_t opd1_sign : 1;
  uint64_t opd2_sign : 1;
  uint64_t res0_sign : 1;
  uint64_t pwr_step : 4;
  uint64_t intr_en : 1;
  uint64_t res0_n : 16;
  uint64_t res0_c : 16;
  uint64_t res0_h : 16;
  uint64_t res0_w : 16;
  uint64_t res0_addr : 32;
  uint64_t opd0_addr : 32;
  uint64_t opd1_addr : 32;
  uint64_t opd2_addr : 32;
  bool operator==(const ShortLINRegDef &rhs) const { return memcmp(this, &rhs, sizeof(ShortLINRegDef)); }
};

struct VCRegDef {
  // 1024bits
  uint64_t cmd_short : 1;
  uint64_t op_code : 16;
  uint64_t cmd_id_dep : 24;
  uint64_t tsk_typ : 4;
  uint64_t tsk_eu_typ : 5;
  uint64_t opt_rq : 1;
  uint64_t tsk_opd_num : 2;
  uint64_t pad_mode : 2;
  uint64_t rsvd1 : 1;
  uint64_t rsvd0 : 3;
  uint64_t pwr_step : 4;
  uint64_t intr_en : 1;
  uint64_t opt_res_add : 1;
  uint64_t opt_relu : 1;
  uint64_t opt_left_tran : 1;
  uint64_t opt_opd4_const : 1;
  uint64_t opt_kernel_rotate : 1;
  uint64_t opt_opd0_sign : 1;
  uint64_t opt_opd1_sign : 1;
  uint64_t opt_opd2_sign : 1;
  uint64_t opt_res0_prec : 3;
  uint64_t opt_opd0_prec : 3;
  uint64_t opt_opd1_prec : 3;
  uint64_t opt_opd2_prec : 3;
  uint64_t opt_opd0_const : 1;
  uint64_t opt_opd1_const : 1;
  uint64_t opt_opd2_const : 1;
  uint64_t res0_str : 3;
  uint64_t opd0_str : 3;
  uint64_t opd1_str : 3;
  uint64_t opd2_str : 3;
  uint64_t opt_res_add_sign : 1;
  uint64_t rsvd2 : 25;
  uint64_t sym_range : 1;
  uint64_t opt_opd3_const : 1;
  uint64_t opt_opd5_const : 1;
  uint64_t opd0_x_ins0 : 4;
  uint64_t opd0_y_ins0 : 4;
  uint64_t opd1_x_ins0 : 4;
  uint64_t opd1_y_ins0 : 4;
  uint64_t opd0_up_pad : 4;
  uint64_t opd0_dn_pad : 4;
  uint64_t opd0_lf_pad : 4;
  uint64_t opd0_rt_pad : 4;
  uint64_t res_op_x_str : 4;
  uint64_t res_op_y_str : 4;
  uint64_t res0_h_shift : 4;
  uint64_t res0_w_shift : 4;
  uint64_t opd0_h_shift : 4;
  uint64_t opd0_w_shift : 4;
  uint64_t opd1_h_shift : 4;
  uint64_t opd1_w_shift : 4;
  uint64_t tsk_lane_num : 64;
  uint64_t res0_n : 16;
  uint64_t res0_c : 16;
  uint64_t res0_h : 16;
  uint64_t res0_w : 16;
  uint64_t opd0_n : 16;
  uint64_t opd0_c : 16;
  uint64_t opd0_h : 16;
  uint64_t opd0_w : 16;
  uint64_t opd1_n : 16;
  uint64_t opd1_c : 16;
  uint64_t opd1_h : 16;
  uint64_t opd1_w : 16;
  uint64_t res0_n_str : 16;
  uint64_t res0_c_str : 16;
  uint64_t opd0_n_str : 16;
  uint64_t opd0_c_str : 16;
  uint64_t opd1_n_str : 16;
  uint64_t opd1_c_str : 16;
  uint64_t opd2_n_str : 16;
  uint64_t opd2_c_str : 16;
  uint64_t res0_addr : 32;
  uint64_t opd0_addr : 32;
  uint64_t opd1_addr : 32;
  uint64_t opd2_addr : 32;
  uint64_t res0_h_str : 32;
  uint64_t res0_w_str : 32;
  uint64_t opd0_h_str : 32;
  uint64_t opd0_w_str : 32;
  uint64_t opd1_h_str : 32;
  uint64_t opd1_w_str : 32;
  uint64_t opd2_h_str : 32;
  uint64_t opd2_w_str : 32;
  uint64_t res1_addr : 32;
  uint64_t opd3_addr : 32;
  bool operator==(const VCRegDef &rhs) const { return memcmp(this, &rhs, sizeof(VCRegDef)); }
};

struct ShortVCRegDef {
  // 384bits
  uint64_t cmd_short : 1;
  uint64_t op_code : 16;
  uint64_t cmd_id_dep : 24;
  uint64_t tsk_typ : 4;
  uint64_t tsk_eu_typ : 5;
  uint64_t opt_opd0_sign : 1;
  uint64_t opt_opd1_sign : 1;
  uint64_t opd2_n_str : 3;
  uint64_t rsvd0 : 4;
  uint64_t pwr_step : 4;
  uint64_t intr_en : 1;
  uint64_t opt_res0_prec : 3;
  uint64_t opt_opd0_prec : 3;
  uint64_t opt_opd1_prec : 3;
  uint64_t res0_addr : 32;
  uint64_t rsvd1 : 23;
  uint64_t opd0_addr : 32;
  uint64_t rsvd2 : 16;
  uint64_t res0_c : 16;
  uint64_t res0_w : 16;
  uint64_t opd0_c : 16;
  uint64_t opd0_w : 16;
  uint64_t opd1_w : 16;
  uint64_t opd1_addr : 32;
  uint64_t opd2_addr : 32;
  uint64_t rsvd3 : 64;
  bool operator==(const ShortVCRegDef &rhs) const { return memcmp(this, &rhs, sizeof(ShortVCRegDef)); }
};

struct ARRegDef {
  // 1024bits
  uint64_t cmd_short : 1;
  uint64_t op_code : 16;
  uint64_t cmd_id_dep : 24;
  uint64_t tsk_typ : 4;
  uint64_t tsk_eu_typ : 5;
  uint64_t opt_rq : 1;
  uint64_t tsk_opd_num : 2;
  uint64_t pad_mode : 2;
  uint64_t opt_res0_sign : 1;
  uint64_t rsvd0 : 3;
  uint64_t pwr_step : 4;
  uint64_t intr_en : 1;
  uint64_t opt_res_add : 1;
  uint64_t opt_relu : 1;
  uint64_t opt_left_tran : 1;
  uint64_t opt_opd4_const : 1;
  uint64_t opt_kernel_rotate : 1;
  uint64_t opt_opd0_sign : 1;
  uint64_t opt_opd1_sign : 1;
  uint64_t opt_opd2_sign : 1;
  uint64_t opt_res0_prec : 3;
  uint64_t opt_opd0_prec : 3;
  uint64_t opt_opd1_prec : 3;
  uint64_t opt_opd2_prec : 3;
  uint64_t opt_opd0_const : 1;
  uint64_t opt_opd1_const : 1;
  uint64_t opt_opd2_const : 1;
  uint64_t res0_str : 3;
  uint64_t opd0_str : 3;
  uint64_t opd1_str : 3;
  uint64_t opd2_str : 3;
  uint64_t opt_res_add_sign : 1;
  uint64_t rsvd2 : 25;
  uint64_t sym_range : 1;
  uint64_t opt_opd3_const : 1;
  uint64_t opt_opd5_const : 1;
  uint64_t opd0_x_ins0 : 4;
  uint64_t opd0_y_ins0 : 4;
  uint64_t opd1_x_ins0 : 4;
  uint64_t opd1_y_ins0 : 4;
  uint64_t opd0_up_pad : 4;
  uint64_t opd0_dn_pad : 4;
  uint64_t opd0_lf_pad : 4;
  uint64_t opd0_rt_pad : 4;
  uint64_t res_op_x_str : 4;
  uint64_t res_op_y_str : 4;
  uint64_t res0_h_shift : 4;
  uint64_t res0_w_shift : 4;
  uint64_t opd0_h_shift : 4;
  uint64_t opd0_w_shift : 4;
  uint64_t opd1_h_shift : 4;
  uint64_t opd1_w_shift : 4;
  uint64_t tsk_lane_num : 64;
  uint64_t res0_n : 16;
  uint64_t res0_c : 16;
  uint64_t res0_h : 16;
  uint64_t res0_w : 16;
  uint64_t opd0_n : 16;
  uint64_t opd0_c : 16;
  uint64_t opd0_h : 16;
  uint64_t opd0_w : 16;
  uint64_t opd1_n : 16;
  uint64_t opd1_c : 16;
  uint64_t opd1_h : 16;
  uint64_t opd1_w : 16;
  uint64_t res0_n_str : 16;
  uint64_t res0_c_str : 16;
  uint64_t opd0_n_str : 16;
  uint64_t opd0_c_str : 16;
  uint64_t opd1_n_str : 16;
  uint64_t opd1_c_str : 16;
  uint64_t opd2_n_str : 16;
  uint64_t opd2_c_str : 16;
  uint64_t res0_addr : 32;
  uint64_t opd0_addr : 32;
  uint64_t opd1_addr : 32;
  uint64_t opd2_addr : 32;
  uint64_t res0_h_str : 32;
  uint64_t res0_w_str : 32;
  uint64_t opd0_h_str : 32;
  uint64_t opd0_w_str : 32;
  uint64_t opd1_h_str : 32;
  uint64_t opd1_w_str : 32;
  uint64_t opd2_h_str : 32;
  uint64_t opd2_w_str : 32;
  uint64_t res1_addr : 32;
  uint64_t opd3_addr : 32;
  bool operator==(const ARRegDef &rhs) const { return memcmp(this, &rhs, sizeof(ARRegDef)); }
};

struct ShortARRegDef {
  // 512bits
  uint64_t cmd_short : 1;
  uint64_t op_code : 16;
  uint64_t cmd_id_dep : 24;
  uint64_t tsk_typ : 4;
  uint64_t tsk_eu_typ : 5;
  uint64_t opt_opd0_const : 1;
  uint64_t opt_opd1_const : 1;
  uint64_t opt_opd2_const : 1;
  uint64_t tsk_opd_num : 2;
  uint64_t sym_range : 1;
  uint64_t rsvd0 : 3;
  uint64_t pwr_step : 4;
  uint64_t intr_en : 1;
  uint64_t opt_res0_prec : 3;
  uint64_t opt_opd0_prec : 3;
  uint64_t opt_opd1_prec : 3;
  uint64_t opt_opd2_prec : 3;
  uint64_t opt_opd0_sign : 1;
  uint64_t opt_opd1_sign : 1;
  uint64_t res0_str : 3;
  uint64_t opd0_str : 3;
  uint64_t opd1_str : 3;
  uint64_t opd2_n_str : 3;
  uint64_t rsvd1 : 6;
  uint64_t res0_n : 16;
  uint64_t res0_c : 16;
  uint64_t res0_h : 16;
  uint64_t res0_w : 16;
  uint64_t res0_addr : 32;
  uint64_t opd0_addr : 32;
  uint64_t opd1_addr : 32;
  uint64_t opd2_addr : 32;
  uint64_t res0_n_str : 16;
  uint64_t res0_c_str : 16;
  uint64_t opd0_n_str : 16;
  uint64_t opd0_c_str : 16;
  uint64_t opd1_n_str : 16;
  uint64_t opd1_c_str : 16;
  uint64_t res0_h_str : 20;
  uint64_t res0_w_str : 20;
  uint64_t opd0_h_str : 20;
  uint64_t opt_opd2_sign : 1;
  uint64_t rsvd2 : 3;
  uint64_t opd0_w_str : 20;
  uint64_t opd1_h_str : 20;
  uint64_t opd1_w_str : 20;
  uint64_t rsvd3 : 4;
  bool operator==(const ShortARRegDef &rhs) const { return memcmp(this, &rhs, sizeof(ShortARRegDef)); }
};

struct PorDRegDef {
  // 1024bits
  uint64_t cmd_short : 1;
  uint64_t op_code : 16;
  uint64_t cmd_id_dep : 24;
  uint64_t tsk_typ : 4;
  uint64_t tsk_eu_typ : 5;
  uint64_t opt_rq : 1;
  uint64_t tsk_opd_num : 2;
  uint64_t pad_mode : 2;
  uint64_t opt_res0_sign : 1;
  uint64_t rsvd0 : 3;
  uint64_t pwr_step : 4;
  uint64_t intr_en : 1;
  uint64_t opt_res_add : 1;
  uint64_t opt_relu : 1;
  uint64_t opt_left_tran : 1;
  uint64_t opt_opd4_const : 1;
  uint64_t opt_kernel_rotate : 1;
  uint64_t opt_opd0_sign : 1;
  uint64_t opt_opd1_sign : 1;
  uint64_t opt_opd2_sign : 1;
  uint64_t opt_res0_prec : 3;
  uint64_t opt_opd0_prec : 3;
  uint64_t opt_opd1_prec : 3;
  uint64_t opt_opd2_prec : 3;
  uint64_t opt_opd0_const : 1;
  uint64_t opt_opd1_const : 1;
  uint64_t opt_opd2_const : 1;
  uint64_t res0_str : 3;
  uint64_t opd0_str : 3;
  uint64_t opd1_str : 3;
  uint64_t opd2_str : 3;
  uint64_t opt_res_add_sign : 1;
  uint64_t rsvd2 : 25;
  uint64_t sym_range : 1;
  uint64_t opt_opd3_const : 1;
  uint64_t opt_opd5_const : 1;
  uint64_t opd0_x_ins0 : 4;
  uint64_t opd0_y_ins0 : 4;
  uint64_t opd1_x_ins0 : 4;
  uint64_t opd1_y_ins0 : 4;
  uint64_t opd0_up_pad : 4;
  uint64_t opd0_dn_pad : 4;
  uint64_t opd0_lf_pad : 4;
  uint64_t opd0_rt_pad : 4;
  uint64_t res_op_x_str : 4;
  uint64_t res_op_y_str : 4;
  uint64_t res0_h_shift : 4;
  uint64_t res0_w_shift : 4;
  uint64_t opd0_h_shift : 4;
  uint64_t opd0_w_shift : 4;
  uint64_t opd1_h_shift : 4;
  uint64_t opd1_w_shift : 4;
  uint64_t tsk_lane_num : 64;
  uint64_t res0_n : 16;
  uint64_t res0_c : 16;
  uint64_t res0_h : 16;
  uint64_t res0_w : 16;
  uint64_t opd0_n : 16;
  uint64_t opd0_c : 16;
  uint64_t opd0_h : 16;
  uint64_t opd0_w : 16;
  uint64_t opd1_n : 16;
  uint64_t opd1_c : 16;
  uint64_t opd1_h : 16;
  uint64_t opd1_w : 16;
  uint64_t res0_n_str : 16;
  uint64_t res0_c_str : 16;
  uint64_t opd0_n_str : 16;
  uint64_t opd0_c_str : 16;
  uint64_t opd1_n_str : 16;
  uint64_t opd1_c_str : 16;
  uint64_t opd2_n_str : 16;
  uint64_t opd2_c_str : 16;
  uint64_t res0_addr : 32;
  uint64_t opd0_addr : 32;
  uint64_t opd1_addr : 32;
  uint64_t opd2_addr : 32;
  uint64_t res0_h_str : 32;
  uint64_t res0_w_str : 32;
  uint64_t opd0_h_str : 32;
  uint64_t opd0_w_str : 32;
  uint64_t opd1_h_str : 32;
  uint64_t opd1_w_str : 32;
  uint64_t opd2_h_str : 32;
  uint64_t opd2_w_str : 32;
  uint64_t res1_addr : 32;
  uint64_t opd3_addr : 32;
  bool operator==(const PorDRegDef &rhs) const { return memcmp(this, &rhs, sizeof(PorDRegDef)); }
};

struct ShortPorDRegDef {
  // 512bits
  uint64_t cmd_short : 1;
  uint64_t sym_range : 1;
  uint64_t rsvd0 : 1;
  uint64_t opt_opd5_const : 1;
  uint64_t opt_relu : 1;
  uint64_t opt_rq : 1;
  uint64_t op_code : 11;
  uint64_t cmd_id_dep : 24;
  uint64_t tsk_typ : 4;
  uint64_t tsk_eu_typ : 5;
  uint64_t opt_kernel_rotate : 1;
  uint64_t opt_opd0_sign : 1;
  uint64_t opt_opd1_sign : 1;
  uint64_t pad_mode : 2;
  uint64_t opt_res0_sign : 1;
  uint64_t opt_opd2_prec : 3;
  uint64_t pwr_step : 4;
  uint64_t opt_opd1_const : 1;
  uint64_t opt_opd2_const : 1;
  uint64_t opt_opd3_const : 1;
  uint64_t opt_res0_prec : 3;
  uint64_t opt_opd0_prec : 3;
  uint64_t opd0_x_ins0 : 4;
  uint64_t opd0_y_ins0 : 4;
  uint64_t opd1_x_ins0 : 4;
  uint64_t opd1_y_ins0 : 4;
  uint64_t opd0_up_pad : 4;
  uint64_t opd0_dn_pad : 4;
  uint64_t opd0_lf_pad : 4;
  uint64_t opd0_rt_pad : 4;
  uint64_t res_op_x_str : 4;
  uint64_t res_op_y_str : 4;
  uint64_t opd2_n_str : 3;
  uint64_t rsvd2 : 11;
  uint64_t opt_opd2_sign : 1;
  uint64_t intr_en : 1;
  uint64_t res0_n : 16;
  uint64_t res0_c : 16;
  uint64_t res0_h : 16;
  uint64_t res0_w : 16;
  uint64_t opd0_h : 16;
  uint64_t opd0_w : 16;
  uint64_t opd1_h : 16;
  uint64_t opd1_w : 16;
  uint64_t res0_addr : 32;
  uint64_t opd0_addr : 32;
  uint64_t opd1_addr : 32;
  uint64_t opd2_addr : 32;
  uint64_t res1_addr : 32;
  uint64_t opd3_addr : 32;
  uint64_t rsvd3 : 64;
  bool operator==(const ShortPorDRegDef &rhs) const { return memcmp(this, &rhs, sizeof(ShortPorDRegDef)); }
};

struct RQDQRegDef {
  // 1024bits
  uint64_t cmd_short : 1;
  uint64_t op_code : 16;
  uint64_t cmd_id_dep : 24;
  uint64_t tsk_typ : 4;
  uint64_t tsk_eu_typ : 5;
  uint64_t opt_rq : 1;
  uint64_t tsk_opd_num : 2;
  uint64_t pad_mode : 2;
  uint64_t opt_res0_sign : 1;
  uint64_t rsvd0 : 3;
  uint64_t pwr_step : 4;
  uint64_t intr_en : 1;
  uint64_t opt_res_add : 1;
  uint64_t opt_relu : 1;
  uint64_t opt_left_tran : 1;
  uint64_t opt_opd4_const : 1;
  uint64_t opt_kernel_rotate : 1;
  uint64_t opt_opd0_sign : 1;
  uint64_t opt_opd1_sign : 1;
  uint64_t opt_opd2_sign : 1;
  uint64_t opt_res0_prec : 3;
  uint64_t opt_opd0_prec : 3;
  uint64_t opt_opd1_prec : 3;
  uint64_t opt_opd2_prec : 3;
  uint64_t opt_opd0_const : 1;
  uint64_t opt_opd1_const : 1;
  uint64_t opt_opd2_const : 1;
  uint64_t res0_str : 3;
  uint64_t opd0_str : 3;
  uint64_t opd1_str : 3;
  uint64_t opd2_str : 3;
  uint64_t opt_res_add_sign : 1;
  uint64_t rsvd2 : 25;
  uint64_t sym_range : 1;
  uint64_t opt_opd3_const : 1;
  uint64_t opt_opd5_const : 1;
  uint64_t opd0_x_ins0 : 4;
  uint64_t opd0_y_ins0 : 4;
  uint64_t opd1_x_ins0 : 4;
  uint64_t opd1_y_ins0 : 4;
  uint64_t opd0_up_pad : 4;
  uint64_t opd0_dn_pad : 4;
  uint64_t opd0_lf_pad : 4;
  uint64_t opd0_rt_pad : 4;
  uint64_t res_op_x_str : 4;
  uint64_t res_op_y_str : 4;
  uint64_t res0_h_shift : 4;
  uint64_t res0_w_shift : 4;
  uint64_t opd0_h_shift : 4;
  uint64_t opd0_w_shift : 4;
  uint64_t opd1_h_shift : 4;
  uint64_t opd1_w_shift : 4;
  uint64_t tsk_lane_num : 64;
  uint64_t res0_n : 16;
  uint64_t res0_c : 16;
  uint64_t res0_h : 16;
  uint64_t res0_w : 16;
  uint64_t opd0_n : 16;
  uint64_t opd0_c : 16;
  uint64_t opd0_h : 16;
  uint64_t opd0_w : 16;
  uint64_t opd1_n : 16;
  uint64_t opd1_c : 16;
  uint64_t opd1_h : 16;
  uint64_t opd1_w : 16;
  uint64_t res0_n_str : 16;
  uint64_t res0_c_str : 16;
  uint64_t opd0_n_str : 16;
  uint64_t opd0_c_str : 16;
  uint64_t opd1_n_str : 16;
  uint64_t opd1_c_str : 16;
  uint64_t opd2_n_str : 16;
  uint64_t opd2_c_str : 16;
  uint64_t res0_addr : 32;
  uint64_t opd0_addr : 32;
  uint64_t opd1_addr : 32;
  uint64_t opd2_addr : 32;
  uint64_t res0_h_str : 32;
  uint64_t res0_w_str : 32;
  uint64_t opd0_h_str : 32;
  uint64_t opd0_w_str : 32;
  uint64_t opd1_h_str : 32;
  uint64_t opd1_w_str : 32;
  uint64_t opd2_h_str : 32;
  uint64_t opd2_w_str : 32;
  uint64_t res1_addr : 32;
  uint64_t opd3_addr : 32;
  bool operator==(const RQDQRegDef &rhs) const { return memcmp(this, &rhs, sizeof(RQDQRegDef)); }
};

struct ShortRQDQRegDef {
  // 256bits
  uint64_t cmd_short : 1;
  uint64_t sym_range : 1;
  uint64_t op_code : 15;
  uint64_t cmd_id_dep : 24;
  uint64_t tsk_typ : 4;
  uint64_t tsk_eu_typ : 5;
  uint64_t opt_opd0_sign : 1;
  uint64_t opt_opd2_sign : 1;
  uint64_t opt_res0_prec : 3;
  uint64_t rsvd0 : 4;
  uint64_t pwr_step : 4;
  uint64_t opt_opd1_const : 1;
  uint64_t opt_opd0_prec : 3;
  uint64_t opd2_n_str : 6;
  uint64_t rsvd1 : 1;
  uint64_t res0_addr : 26;
  uint64_t opd0_addr : 27;
  uint64_t intr_en : 1;
  uint64_t res0_n : 16;
  uint64_t res0_c : 16;
  uint64_t res0_h : 16;
  uint64_t res0_w : 16;
  uint64_t opd1_addr : 32;
  uint64_t opd2_addr : 32;
  bool operator==(const ShortRQDQRegDef &rhs) const { return memcmp(this, &rhs, sizeof(ShortRQDQRegDef)); }
};

struct SGRegDef {
  // 1024bits
  uint64_t cmd_short : 1;
  uint64_t op_code : 16;
  uint64_t cmd_id_dep : 24;
  uint64_t tsk_typ : 4;
  uint64_t tsk_eu_typ : 5;
  uint64_t opt_rq : 1;
  uint64_t tsk_opd_num : 2;
  uint64_t pad_mode : 2;
  uint64_t opt_res0_sign : 1;
  uint64_t rsvd0 : 3;
  uint64_t pwr_step : 4;
  uint64_t intr_en : 1;
  uint64_t opt_res_add : 1;
  uint64_t opt_relu : 1;
  uint64_t opt_left_tran : 1;
  uint64_t opt_opd4_const : 1;
  uint64_t opt_kernel_rotate : 1;
  uint64_t opt_opd0_sign : 1;
  uint64_t opt_opd1_sign : 1;
  uint64_t opt_opd2_sign : 1;
  uint64_t opt_res0_prec : 3;
  uint64_t opt_opd0_prec : 3;
  uint64_t opt_opd1_prec : 3;
  uint64_t opt_opd2_prec : 3;
  uint64_t opt_opd0_const : 1;
  uint64_t opt_opd1_const : 1;
  uint64_t opt_opd2_const : 1;
  uint64_t res0_str : 3;
  uint64_t opd0_str : 3;
  uint64_t opd1_str : 3;
  uint64_t opd2_str : 3;
  uint64_t opt_res_add_sign : 1;
  uint64_t rsvd2 : 25;
  uint64_t sym_range : 1;
  uint64_t opt_opd3_const : 1;
  uint64_t opt_opd5_const : 1;
  uint64_t opd0_x_ins0 : 4;
  uint64_t opd0_y_ins0 : 4;
  uint64_t opd1_x_ins0 : 4;
  uint64_t opd1_y_ins0 : 4;
  uint64_t opd0_up_pad : 4;
  uint64_t opd0_dn_pad : 4;
  uint64_t opd0_lf_pad : 4;
  uint64_t opd0_rt_pad : 4;
  uint64_t res_op_x_str : 4;
  uint64_t res_op_y_str : 4;
  uint64_t res0_h_shift : 4;
  uint64_t res0_w_shift : 4;
  uint64_t opd0_h_shift : 4;
  uint64_t opd0_w_shift : 4;
  uint64_t opd1_h_shift : 4;
  uint64_t opd1_w_shift : 4;
  uint64_t tsk_lane_num : 64;
  uint64_t res0_n : 16;
  uint64_t res0_c : 16;
  uint64_t res0_h : 16;
  uint64_t res0_w : 16;
  uint64_t opd0_n : 16;
  uint64_t opd0_c : 16;
  uint64_t opd0_h : 16;
  uint64_t opd0_w : 16;
  uint64_t opd1_n : 16;
  uint64_t opd1_c : 16;
  uint64_t opd1_h : 16;
  uint64_t opd1_w : 16;
  uint64_t res0_n_str : 16;
  uint64_t res0_c_str : 16;
  uint64_t opd0_n_str : 16;
  uint64_t opd0_c_str : 16;
  uint64_t opd1_n_str : 16;
  uint64_t opd1_c_str : 16;
  uint64_t opd2_n_str : 16;
  uint64_t opd2_c_str : 16;
  uint64_t res0_addr : 32;
  uint64_t opd0_addr : 32;
  uint64_t opd1_addr : 32;
  uint64_t opd2_addr : 32;
  uint64_t res0_h_str : 32;
  uint64_t res0_w_str : 32;
  uint64_t opd0_h_str : 32;
  uint64_t opd0_w_str : 32;
  uint64_t opd1_h_str : 32;
  uint64_t opd1_w_str : 32;
  uint64_t opd2_h_str : 32;
  uint64_t opd2_w_str : 32;
  uint64_t res1_addr : 32;
  uint64_t opd3_addr : 32;
  bool operator==(const SGRegDef &rhs) const { return memcmp(this, &rhs, sizeof(SGRegDef)); }
};

struct ShortSGRegDef {
  // 384bits
  uint64_t cmd_short : 1;
  uint64_t op_code : 16;
  uint64_t cmd_id_dep : 24;
  uint64_t tsk_typ : 4;
  uint64_t tsk_eu_typ : 5;
  uint64_t opt_opd3_const : 1;
  uint64_t intr_en : 1;
  uint64_t opd0_str : 3;
  uint64_t rsvd0 : 4;
  uint64_t pwr_step : 4;
  uint64_t opt_opd2_const : 1;
  uint64_t res0_n : 16;
  uint64_t res0_c : 16;
  uint64_t res0_h : 16;
  uint64_t res0_w : 16;
  uint64_t opd0_h : 16;
  uint64_t opd0_w : 16;
  uint64_t opd1_c : 16;
  uint64_t opd1_w : 16;
  uint64_t opt_res0_prec : 3;
  uint64_t res0_addr : 29;
  uint64_t opt_opd0_prec : 3;
  uint64_t opd0_addr : 29;
  uint64_t opt_opd1_prec : 3;
  uint64_t opd1_addr : 29;
  uint64_t opd2_addr : 32;
  uint64_t res1_addr : 32;
  uint64_t opd3_addr : 32;
  bool operator==(const ShortSGRegDef &rhs) const { return memcmp(this, &rhs, sizeof(ShortSGRegDef)); }
};

struct SGLRegDef {
  // 1024bits
  uint64_t cmd_short : 1;
  uint64_t op_code : 16;
  uint64_t cmd_id_dep : 24;
  uint64_t tsk_typ : 4;
  uint64_t tsk_eu_typ : 5;
  uint64_t opt_rq : 1;
  uint64_t tsk_opd_num : 2;
  uint64_t pad_mode : 2;
  uint64_t opt_res0_sign : 1;
  uint64_t rsvd0 : 3;
  uint64_t pwr_step : 4;
  uint64_t intr_en : 1;
  uint64_t opt_res_add : 1;
  uint64_t opt_relu : 1;
  uint64_t opt_left_tran : 1;
  uint64_t opt_opd4_const : 1;
  uint64_t opt_kernel_rotate : 1;
  uint64_t opt_opd0_sign : 1;
  uint64_t opt_opd1_sign : 1;
  uint64_t opt_opd2_sign : 1;
  uint64_t opt_res0_prec : 3;
  uint64_t opt_opd0_prec : 3;
  uint64_t opt_opd1_prec : 3;
  uint64_t opt_opd2_prec : 3;
  uint64_t opt_opd0_const : 1;
  uint64_t opt_opd1_const : 1;
  uint64_t opt_opd2_const : 1;
  uint64_t res0_str : 3;
  uint64_t opd0_str : 3;
  uint64_t opd1_str : 3;
  uint64_t opd2_str : 3;
  uint64_t opt_res_add_sign : 1;
  uint64_t rsvd2 : 25;
  uint64_t sym_range : 1;
  uint64_t opt_opd3_const : 1;
  uint64_t opt_opd5_const : 1;
  uint64_t opd0_x_ins0 : 4;
  uint64_t opd0_y_ins0 : 4;
  uint64_t opd1_x_ins0 : 4;
  uint64_t opd1_y_ins0 : 4;
  uint64_t opd0_up_pad : 4;
  uint64_t opd0_dn_pad : 4;
  uint64_t opd0_lf_pad : 4;
  uint64_t opd0_rt_pad : 4;
  uint64_t res_op_x_str : 4;
  uint64_t res_op_y_str : 4;
  uint64_t res0_h_shift : 4;
  uint64_t res0_w_shift : 4;
  uint64_t opd0_h_shift : 4;
  uint64_t opd0_w_shift : 4;
  uint64_t opd1_h_shift : 4;
  uint64_t opd1_w_shift : 4;
  uint64_t tsk_lane_num : 64;
  uint64_t res0_n : 16;
  uint64_t res0_c : 16;
  uint64_t res0_h : 16;
  uint64_t res0_w : 16;
  uint64_t opd0_n : 16;
  uint64_t opd0_c : 16;
  uint64_t opd0_h : 16;
  uint64_t opd0_w : 16;
  uint64_t opd1_n : 16;
  uint64_t opd1_c : 16;
  uint64_t opd1_h : 16;
  uint64_t opd1_w : 16;
  uint64_t res0_n_str : 16;
  uint64_t res0_c_str : 16;
  uint64_t opd0_n_str : 16;
  uint64_t opd0_c_str : 16;
  uint64_t opd1_n_str : 16;
  uint64_t opd1_c_str : 16;
  uint64_t opd2_n_str : 16;
  uint64_t opd2_c_str : 16;
  uint64_t res0_addr : 32;
  uint64_t opd0_addr : 32;
  uint64_t opd1_addr : 32;
  uint64_t opd2_addr : 32;
  uint64_t res0_h_str : 32;
  uint64_t res0_w_str : 32;
  uint64_t opd0_h_str : 32;
  uint64_t opd0_w_str : 32;
  uint64_t opd1_h_str : 32;
  uint64_t opd1_w_str : 32;
  uint64_t opd2_h_str : 32;
  uint64_t opd2_w_str : 32;
  uint64_t res1_addr : 32;
  uint64_t opd3_addr : 32;
  bool operator==(const SGLRegDef &rhs) const { return memcmp(this, &rhs, sizeof(SGLRegDef)); }
};

struct ShortSGLRegDef {
  // 384bits
  uint64_t cmd_short : 1;
  uint64_t op_code : 16;
  uint64_t cmd_id_dep : 24;
  uint64_t tsk_typ : 4;
  uint64_t tsk_eu_typ : 5;
  uint64_t rsvd0 : 3;
  uint64_t opt_opd3_const : 1;
  uint64_t intr_en : 1;
  uint64_t rsvd1 : 4;
  uint64_t pwr_step : 4;
  uint64_t opt_opd2_const : 1;
  uint64_t opt_res0_prec : 3;
  uint64_t opt_opd1_prec : 3;
  uint64_t opd0_str : 3;
  uint64_t rsvd2 : 7;
  uint64_t res0_n : 16;
  uint64_t res0_c : 16;
  uint64_t res0_h : 16;
  uint64_t res0_w : 16;
  uint64_t opd0_h : 16;
  uint64_t res0_addr : 32;
  uint64_t opd0_addr : 32;
  uint64_t opd1_addr : 32;
  uint64_t opd2_addr : 32;
  uint64_t res1_addr : 32;
  uint64_t rsvd3 : 64;
  bool operator==(const ShortSGLRegDef &rhs) const { return memcmp(this, &rhs, sizeof(ShortSGLRegDef)); }
};

struct CWBCRegDef {
  // 1024bits
  uint64_t cmd_short : 1;
  uint64_t op_code : 16;
  uint64_t cmd_id_dep : 24;
  uint64_t tsk_typ : 4;
  uint64_t tsk_eu_typ : 5;
  uint64_t opt_rq : 1;
  uint64_t tsk_opd_num : 2;
  uint64_t pad_mode : 2;
  uint64_t opt_res0_sign : 1;
  uint64_t rsvd0 : 3;
  uint64_t pwr_step : 4;
  uint64_t intr_en : 1;
  uint64_t opt_res_add : 1;
  uint64_t opt_relu : 1;
  uint64_t opt_left_tran : 1;
  uint64_t opt_opd4_const : 1;
  uint64_t opt_kernel_rotate : 1;
  uint64_t opt_opd0_sign : 1;
  uint64_t opt_opd1_sign : 1;
  uint64_t opt_opd2_sign : 1;
  uint64_t opt_res0_prec : 3;
  uint64_t opt_opd0_prec : 3;
  uint64_t opt_opd1_prec : 3;
  uint64_t opt_opd2_prec : 3;
  uint64_t opt_opd0_const : 1;
  uint64_t opt_opd1_const : 1;
  uint64_t opt_opd2_const : 1;
  uint64_t res0_str : 3;
  uint64_t opd0_str : 3;
  uint64_t opd1_str : 3;
  uint64_t opd2_str : 3;
  uint64_t opt_res_add_sign : 1;
  uint64_t rsvd2 : 25;
  uint64_t sym_range : 1;
  uint64_t opt_opd3_const : 1;
  uint64_t opt_opd5_const : 1;
  uint64_t opd0_x_ins0 : 4;
  uint64_t opd0_y_ins0 : 4;
  uint64_t opd1_x_ins0 : 4;
  uint64_t opd1_y_ins0 : 4;
  uint64_t opd0_up_pad : 4;
  uint64_t opd0_dn_pad : 4;
  uint64_t opd0_lf_pad : 4;
  uint64_t opd0_rt_pad : 4;
  uint64_t res_op_x_str : 4;
  uint64_t res_op_y_str : 4;
  uint64_t res0_h_shift : 4;
  uint64_t res0_w_shift : 4;
  uint64_t opd0_h_shift : 4;
  uint64_t opd0_w_shift : 4;
  uint64_t opd1_h_shift : 4;
  uint64_t opd1_w_shift : 4;
  uint64_t tsk_lane_num : 64;
  uint64_t res0_n : 16;
  uint64_t res0_c : 16;
  uint64_t res0_h : 16;
  uint64_t res0_w : 16;
  uint64_t opd0_n : 16;
  uint64_t opd0_c : 16;
  uint64_t opd0_h : 16;
  uint64_t opd0_w : 16;
  uint64_t opd1_n : 16;
  uint64_t opd1_c : 16;
  uint64_t opd1_h : 16;
  uint64_t opd1_w : 16;
  uint64_t res0_n_str : 16;
  uint64_t res0_c_str : 16;
  uint64_t opd0_n_str : 16;
  uint64_t opd0_c_str : 16;
  uint64_t opd1_n_str : 16;
  uint64_t opd1_c_str : 16;
  uint64_t opd2_n_str : 16;
  uint64_t opd2_c_str : 16;
  uint64_t res0_addr : 32;
  uint64_t opd0_addr : 32;
  uint64_t opd1_addr : 32;
  uint64_t opd2_addr : 32;
  uint64_t res0_h_str : 32;
  uint64_t res0_w_str : 32;
  uint64_t opd0_h_str : 32;
  uint64_t opd0_w_str : 32;
  uint64_t opd1_h_str : 32;
  uint64_t opd1_w_str : 32;
  uint64_t opd2_h_str : 32;
  uint64_t opd2_w_str : 32;
  uint64_t res1_addr : 32;
  uint64_t opd3_addr : 32;
  bool operator==(const CWBCRegDef &rhs) const { return memcmp(this, &rhs, sizeof(CWBCRegDef)); }
};

struct ShortCWBCRegDef {
  // 256bits
  uint64_t cmd_short : 1;
  uint64_t op_code : 16;
  uint64_t cmd_id_dep : 24;
  uint64_t tsk_typ : 4;
  uint64_t tsk_eu_typ : 5;
  uint64_t opt_res0_prec : 3;
  uint64_t rsvd0 : 6;
  uint64_t pwr_step : 4;
  uint64_t intr_en : 1;
  uint64_t res0_n : 16;
  uint64_t res0_c : 16;
  uint64_t res0_h : 16;
  uint64_t res0_w : 16;
  uint64_t opd0_c : 16;
  uint64_t opd0_w : 16;
  uint64_t rsvd1 : 32;
  uint64_t res0_addr : 32;
  uint64_t opd0_addr : 32;
  bool operator==(const ShortCWBCRegDef &rhs) const { return memcmp(this, &rhs, sizeof(ShortCWBCRegDef)); }
};

struct LARRegDef {
  // 128bits
  uint64_t opd0_w_str : 1;
  uint64_t opd1_w_str : 1;
  uint64_t opt_opd2_const : 1;
  uint64_t opt_res0_prec : 3;
  uint64_t opt_opd0_prec : 3;
  uint64_t opt_opd1_prec : 3;
  uint64_t opd2_n_str : 3;
  uint64_t opt_opd0_sign : 1;
  uint64_t opt_opd1_sign : 1;
  uint64_t start_tid : 6;
  uint64_t res0_c : 8;
  uint64_t res0_w : 8;
  uint64_t rsvd0 : 2;
  uint64_t tsk_typ : 4;
  uint64_t tsk_eu_typ : 5;
  uint64_t rsvd1 : 1;
  uint64_t tsk_opd_num : 2;
  uint64_t rsvd2 : 6;
  uint64_t pwr_step : 4;
  uint64_t rsvd3 : 1;
  uint64_t res0_addr : 16;
  uint64_t opd0_addr : 16;
  uint64_t opd1_addr : 16;
  uint64_t opd2_addr : 16;
  bool operator==(const LARRegDef &rhs) const { return memcmp(this, &rhs, sizeof(LARRegDef)); }
};

struct SYSIDRegDef {
  // 128bits
  uint64_t imm0 : 32;
  uint64_t reg_idx0 : 8;
  uint64_t intr_en : 1;
  uint64_t tsk_typ : 4;
  uint64_t tsk_eu_typ : 3;
  uint64_t reg_idx1 : 8;
  uint64_t reg_idx2 : 8;
  uint64_t imm1 : 64;
  bool operator==(const SYSIDRegDef &rhs) const { return memcmp(this, &rhs, sizeof(SYSIDRegDef)); }
};

struct SYSTRACCRegDef {
  // 128bits
  uint64_t imm0 : 32;
  uint64_t reg_idx0 : 8;
  uint64_t intr_en : 1;
  uint64_t tsk_typ : 4;
  uint64_t tsk_eu_typ : 3;
  uint64_t reg_idx1 : 8;
  uint64_t reg_idx2 : 8;
  uint64_t imm1 : 64;
  bool operator==(const SYSTRACCRegDef &rhs) const { return memcmp(this, &rhs, sizeof(SYSTRACCRegDef)); }
};

struct RANDRegDef {
  // 1024bits
  uint64_t cmd_short : 1;
  uint64_t op_code : 16;
  uint64_t cmd_id_dep : 24;
  uint64_t tsk_typ : 4;
  uint64_t tsk_eu_typ : 5;
  uint64_t opt_rq : 1;
  uint64_t tsk_opd_num : 2;
  uint64_t pad_mode : 2;
  uint64_t opt_res0_sign : 1;
  uint64_t rsvd0 : 3;
  uint64_t pwr_step : 4;
  uint64_t intr_en : 1;
  uint64_t opt_res_add : 1;
  uint64_t opt_relu : 1;
  uint64_t opt_left_tran : 1;
  uint64_t opt_opd4_const : 1;
  uint64_t opt_kernel_rotate : 1;
  uint64_t opt_opd0_sign : 1;
  uint64_t opt_opd1_sign : 1;
  uint64_t opt_opd2_sign : 1;
  uint64_t opt_res0_prec : 3;
  uint64_t opt_opd0_prec : 3;
  uint64_t opt_opd1_prec : 3;
  uint64_t opt_opd2_prec : 3;
  uint64_t opt_opd0_const : 1;
  uint64_t opt_opd1_const : 1;
  uint64_t opt_opd2_const : 1;
  uint64_t res0_str : 3;
  uint64_t opd0_str : 3;
  uint64_t opd1_str : 3;
  uint64_t opd2_str : 3;
  uint64_t opt_res_add_sign : 1;
  uint64_t rsvd2 : 25;
  uint64_t sym_range : 1;
  uint64_t opt_opd3_const : 1;
  uint64_t opt_opd5_const : 1;
  uint64_t opd0_x_ins0 : 4;
  uint64_t opd0_y_ins0 : 4;
  uint64_t opd1_x_ins0 : 4;
  uint64_t opd1_y_ins0 : 4;
  uint64_t opd0_up_pad : 4;
  uint64_t opd0_dn_pad : 4;
  uint64_t opd0_lf_pad : 4;
  uint64_t opd0_rt_pad : 4;
  uint64_t res_op_x_str : 4;
  uint64_t res_op_y_str : 4;
  uint64_t res0_h_shift : 4;
  uint64_t res0_w_shift : 4;
  uint64_t opd0_h_shift : 4;
  uint64_t opd0_w_shift : 4;
  uint64_t opd1_h_shift : 4;
  uint64_t opd1_w_shift : 4;
  uint64_t tsk_lane_num : 64;
  uint64_t res0_n : 16;
  uint64_t res0_c : 16;
  uint64_t res0_h : 16;
  uint64_t res0_w : 16;
  uint64_t opd0_n : 16;
  uint64_t opd0_c : 16;
  uint64_t opd0_h : 16;
  uint64_t opd0_w : 16;
  uint64_t opd1_n : 16;
  uint64_t opd1_c : 16;
  uint64_t opd1_h : 16;
  uint64_t opd1_w : 16;
  uint64_t res0_n_str : 16;
  uint64_t res0_c_str : 16;
  uint64_t opd0_n_str : 16;
  uint64_t opd0_c_str : 16;
  uint64_t opd1_n_str : 16;
  uint64_t opd1_c_str : 16;
  uint64_t opd2_n_str : 16;
  uint64_t opd2_c_str : 16;
  uint64_t res0_addr : 32;
  uint64_t opd0_addr : 32;
  uint64_t opd1_addr : 32;
  uint64_t opd2_addr : 32;
  uint64_t res0_h_str : 32;
  uint64_t res0_w_str : 32;
  uint64_t opd0_h_str : 32;
  uint64_t opd0_w_str : 32;
  uint64_t opd1_h_str : 32;
  uint64_t opd1_w_str : 32;
  uint64_t opd2_h_str : 32;
  uint64_t opd2_w_str : 32;
  uint64_t res1_addr : 32;
  uint64_t opd3_addr : 32;
  bool operator==(const RANDRegDef &rhs) const { return memcmp(this, &rhs, sizeof(RANDRegDef)); }
};

struct SYSRegDef {
  // 128bits
  uint64_t rsvd0 : 1;
  uint64_t rsvd1 : 16;
  uint64_t cmd_id_dep : 24;
  uint64_t tsk_typ : 4;
  uint64_t tsk_eu_typ : 5;
  uint64_t reg_vld : 2;
  uint64_t reg_idx : 7;
  uint64_t pwr_step : 4;
  uint64_t intr_en : 1;
  uint64_t imm : 64;
  bool operator==(const SYSRegDef &rhs) const { return memcmp(this, &rhs, sizeof(SYSRegDef)); }
};

struct DMATensorRegDef {
  // 768bits
  uint64_t intr_en : 1;
  uint64_t stride_enable : 1;
  uint64_t nchw_copy : 1;
  uint64_t cmd_short : 1;
  uint64_t cache_en : 1;
  uint64_t cache_flush : 1;
  uint64_t reserved : 23;
  uint64_t Reserved : 3;
  uint64_t cmd_type : 5;
  uint64_t cmd_special_function : 3;
  uint64_t fill_constant_en : 1;
  uint64_t src_data_format : 4;
  uint64_t reserved_0 : 19;
  uint64_t cmd_id_dep : 17;
  uint64_t reserved_1 : 15;
  uint64_t constant_value : 32;
  uint64_t src_nstride : 32;
  uint64_t src_cstride : 32;
  uint64_t src_hstride : 32;
  uint64_t src_wstride : 32;
  uint64_t dst_nstride : 32;
  uint64_t dst_cstride : 32;
  uint64_t dst_hstride : 32;
  uint64_t dst_wstride : 32;
  uint64_t src_nsize : 16;
  uint64_t src_csize : 16;
  uint64_t src_hsize : 16;
  uint64_t src_wsize : 16;
  uint64_t dst_nsize : 16;
  uint64_t dst_csize : 16;
  uint64_t dst_hsize : 16;
  uint64_t dst_wsize : 16;
  uint64_t src_start_addr_l32 : 32;
  uint64_t src_start_addr_h13 : 13;
  uint64_t reserved_2 : 19;
  uint64_t dst_start_addr_l32 : 32;
  uint64_t dst_start_addr_h13 : 13;
  uint64_t reserved_3 : 19;
  uint64_t all_reduce_code : 16;
  uint64_t Reserved_0 : 16;
  uint64_t Reserved_1 : 32;
  uint64_t localmem_mask_l32 : 32;
  uint64_t localmem_mask_h32 : 32;
  bool operator==(const DMATensorRegDef &rhs) const { return memcmp(this, &rhs, sizeof(DMATensorRegDef)); }
};

struct DMAMatrixRegDef {
  // 768bits
  uint64_t intr_en : 1;
  uint64_t stride_enable : 1;
  uint64_t nchw_copy : 1;
  uint64_t cmd_short : 1;
  uint64_t cache_en : 1;
  uint64_t cache_flush : 1;
  uint64_t reserved : 23;
  uint64_t Reserved : 3;
  uint64_t cmd_type : 5;
  uint64_t cmd_special_function : 3;
  uint64_t fill_constant_en : 1;
  uint64_t src_data_format : 4;
  uint64_t reserved_0 : 19;
  uint64_t cmd_id_dep : 17;
  uint64_t reserved_1 : 15;
  uint64_t constant_value : 32;
  uint64_t src_nstride : 32;
  uint64_t src_cstride : 32;
  uint64_t src_hstride : 32;
  uint64_t src_wstride : 32;
  uint64_t dst_nstride : 32;
  uint64_t dst_cstride : 32;
  uint64_t dst_hstride : 32;
  uint64_t dst_wstride : 32;
  uint64_t src_nsize : 16;
  uint64_t src_csize : 16;
  uint64_t src_hsize : 16;
  uint64_t src_wsize : 16;
  uint64_t dst_nsize : 16;
  uint64_t dst_csize : 16;
  uint64_t dst_hsize : 16;
  uint64_t dst_wsize : 16;
  uint64_t src_start_addr_l32 : 32;
  uint64_t src_start_addr_h13 : 13;
  uint64_t reserved_2 : 19;
  uint64_t dst_start_addr_l32 : 32;
  uint64_t dst_start_addr_h13 : 13;
  uint64_t reserved_3 : 19;
  uint64_t Reserved_0 : 32;
  uint64_t Reserved_1 : 32;
  uint64_t localmem_mask_l32 : 32;
  uint64_t localmem_mask_h32 : 32;
  bool operator==(const DMAMatrixRegDef &rhs) const { return memcmp(this, &rhs, sizeof(DMAMatrixRegDef)); }
};

struct ShortDMAMatrixRegDef {
  // 512bits
  uint64_t intr_en : 1;
  uint64_t stride_enable : 1;
  uint64_t nchw_copy : 1;
  uint64_t cmd_short : 1;
  uint64_t reserved : 1;
  uint64_t reserved_0 : 4;
  uint64_t reserved_1 : 20;
  uint64_t Reserved : 3;
  uint64_t cmd_type : 4;
  uint64_t cmd_special_function : 3;
  uint64_t fill_constant_en : 1;
  uint64_t src_data_format : 3;
  uint64_t reserved_2 : 21;
  uint64_t cmd_id_dep : 24;
  uint64_t reserved_3 : 8;
  uint64_t src_hstride_dst_hstride : 32;
  uint64_t dst_nstride_src_nstride : 32;
  uint64_t dst_cstride_src_cstride : 32;
  uint64_t src_hsize_dst_hsize : 16;
  uint64_t src_wsize_dst_wsize : 16;
  uint64_t dst_nsize_src_nsize : 16;
  uint64_t dst_csize_src_csize : 16;
  uint64_t dst_wsize_src_wsize : 16;
  uint64_t reserved_4 : 16;
  uint64_t src_start_addr_l32 : 32;
  uint64_t src_start_addr_h8 : 8;
  uint64_t reserved_5 : 24;
  uint64_t dst_start_addr_l32 : 32;
  uint64_t dst_start_addr_h8 : 8;
  uint64_t reserved_6 : 24;
  uint64_t reserved_7 : 32;
  uint64_t localmem_mask_l32 : 32;
  uint64_t localmem_mask_h32 : 32;
  bool operator==(const ShortDMAMatrixRegDef &rhs) const { return memcmp(this, &rhs, sizeof(ShortDMAMatrixRegDef)); }
};

struct DMAMaskedSelectRegDef {
  // 768bits
  uint64_t intr_en : 1;
  uint64_t stride_enable : 1;
  uint64_t nchw_copy : 1;
  uint64_t cmd_short : 1;
  uint64_t cache_en : 1;
  uint64_t cache_flush : 1;
  uint64_t reserved : 23;
  uint64_t Reserved : 3;
  uint64_t cmd_type : 5;
  uint64_t cmd_special_function : 3;
  uint64_t fill_constant_en : 1;
  uint64_t src_data_format : 4;
  uint64_t mask_data_format : 4;
  uint64_t reserved_0 : 15;
  uint64_t cmd_id_dep : 17;
  uint64_t reserved_1 : 15;
  uint64_t constant_value : 32;
  uint64_t src_nstride : 32;
  uint64_t src_cstride : 32;
  uint64_t src_hstride : 32;
  uint64_t src_wstride : 32;
  uint64_t dst_nstride : 32;
  uint64_t dst_cstride : 32;
  uint64_t dst_hstride : 32;
  uint64_t dst_wstride : 32;
  uint64_t src_nsize : 16;
  uint64_t src_csize : 16;
  uint64_t src_hsize_src_wsize_high : 16;
  uint64_t src_wsize : 16;
  uint64_t dst_nsize : 16;
  uint64_t dst_csize : 16;
  uint64_t dst_hsize_dst_wsize_high : 16;
  uint64_t dst_wsize : 16;
  uint64_t src_start_addr_l32 : 32;
  uint64_t src_start_addr_h13 : 13;
  uint64_t reserved_2 : 19;
  uint64_t dst_start_addr_l32 : 32;
  uint64_t dst_start_addr_h13 : 13;
  uint64_t reserved_3 : 19;
  uint64_t mask_start_addr_l32 : 32;
  uint64_t mask_start_addr_h8 : 32;
  uint64_t localmem_mask_l32 : 32;
  uint64_t localmem_mask_h32 : 32;
  bool operator==(const DMAMaskedSelectRegDef &rhs) const { return memcmp(this, &rhs, sizeof(DMAMaskedSelectRegDef)); }
};

struct ShortDMAMaskedSelectRegDef {
  // 512bits
  uint64_t intr_en : 1;
  uint64_t stride_enable : 1;
  uint64_t nchw_copy : 1;
  uint64_t cmd_short : 1;
  uint64_t reserved : 1;
  uint64_t reserved_0 : 4;
  uint64_t reserved_1 : 20;
  uint64_t Reserved : 3;
  uint64_t cmd_type : 4;
  uint64_t cmd_special_function : 3;
  uint64_t fill_constant_en : 1;
  uint64_t src_data_format : 3;
  uint64_t mask_data_format : 3;
  uint64_t reserved_2 : 18;
  uint64_t cmd_id_dep : 24;
  uint64_t reserved_3 : 8;
  uint64_t src_nsize : 16;
  uint64_t src_csize : 16;
  uint64_t src_hsize : 16;
  uint64_t src_wsize : 16;
  uint64_t dst_nsize : 16;
  uint64_t dst_csize : 16;
  uint64_t dst_hsize : 16;
  uint64_t dst_wsize : 16;
  uint64_t src_start_addr_l32 : 32;
  uint64_t src_start_addr_h8 : 8;
  uint64_t reserved_4 : 24;
  uint64_t dst_start_addr_l32 : 32;
  uint64_t dst_start_addr_h8 : 8;
  uint64_t reserved_5 : 24;
  uint64_t mask_start_addr_l32 : 32;
  uint64_t mask_start_addr_h8 : 32;
  uint64_t reserved_6 : 32;
  uint64_t reserved_7 : 32;
  uint64_t reserved_8 : 32;
  bool operator==(const ShortDMAMaskedSelectRegDef &rhs) const { return memcmp(this, &rhs, sizeof(ShortDMAMaskedSelectRegDef)); }
};

struct DMAGeneralRegDef {
  // 768bits
  uint64_t intr_en : 1;
  uint64_t stride_enable : 1;
  uint64_t nchw_copy : 1;
  uint64_t cmd_short : 1;
  uint64_t cache_en : 1;
  uint64_t cache_flush : 1;
  uint64_t reserved : 23;
  uint64_t Reserved : 3;
  uint64_t cmd_type : 5;
  uint64_t cmd_special_function : 3;
  uint64_t fill_constant_en : 1;
  uint64_t src_data_format : 4;
  uint64_t reserved_0 : 19;
  uint64_t cmd_id_dep : 17;
  uint64_t reserved_1 : 15;
  uint64_t constant_value : 32;
  uint64_t src_nstride : 32;
  uint64_t src_cstride : 32;
  uint64_t src_hstride : 32;
  uint64_t src_wstride : 32;
  uint64_t dst_nstride : 32;
  uint64_t dst_cstride : 32;
  uint64_t dst_hstride : 32;
  uint64_t dst_wstride : 32;
  uint64_t src_nsize : 16;
  uint64_t src_csize : 16;
  uint64_t src_hsize : 16;
  uint64_t src_wsize : 16;
  uint64_t dst_nsize : 16;
  uint64_t dst_csize : 16;
  uint64_t dst_hsize : 16;
  uint64_t dst_wsize : 16;
  uint64_t src_start_addr_l32 : 32;
  uint64_t src_start_addr_h13 : 13;
  uint64_t reserved_2 : 19;
  uint64_t dst_start_addr_l32 : 32;
  uint64_t dst_start_addr_h13 : 13;
  uint64_t reserved_3 : 19;
  uint64_t Reserved_0 : 32;
  uint64_t Reserved_1 : 32;
  uint64_t localmem_mask_l32 : 32;
  uint64_t localmem_mask_h32 : 32;
  bool operator==(const DMAGeneralRegDef &rhs) const { return memcmp(this, &rhs, sizeof(DMAGeneralRegDef)); }
};

struct ShortDMAGeneralRegDef {
  // 384bits
  uint64_t intr_en : 1;
  uint64_t stride_enable : 1;
  uint64_t nchw_copy : 1;
  uint64_t cmd_short : 1;
  uint64_t reserved : 1;
  uint64_t reserved_0 : 4;
  uint64_t reserved_1 : 20;
  uint64_t Reserved : 3;
  uint64_t cmd_type : 4;
  uint64_t cmd_special_function : 3;
  uint64_t fill_constant_en : 1;
  uint64_t src_data_format : 3;
  uint64_t reserved_2 : 21;
  uint64_t cmd_id_dep : 24;
  uint64_t reserved_3 : 8;
  uint64_t constant_value : 32;
  uint64_t src_cstride : 32;
  uint64_t dst_csize : 16;
  uint64_t reserved_4 : 16;
  uint64_t src_start_addr_l32 : 32;
  uint64_t src_start_addr_h8 : 8;
  uint64_t reserved_5 : 24;
  uint64_t dst_start_addr_l32 : 32;
  uint64_t dst_start_addr_h8 : 8;
  uint64_t reserved_6 : 24;
  uint64_t localmem_mask_l32 : 32;
  uint64_t localmem_mask_h32 : 32;
  bool operator==(const ShortDMAGeneralRegDef &rhs) const { return memcmp(this, &rhs, sizeof(ShortDMAGeneralRegDef)); }
};

struct DMACwTransposeRegDef {
  // 768bits
  uint64_t intr_en : 1;
  uint64_t stride_enable : 1;
  uint64_t nchw_copy : 1;
  uint64_t cmd_short : 1;
  uint64_t cache_en : 1;
  uint64_t cache_flush : 1;
  uint64_t reserved : 23;
  uint64_t Reserved : 3;
  uint64_t cmd_type : 5;
  uint64_t cmd_special_function : 3;
  uint64_t fill_constant_en : 1;
  uint64_t src_data_format : 4;
  uint64_t reserved_0 : 19;
  uint64_t cmd_id_dep : 17;
  uint64_t reserved_1 : 15;
  uint64_t constant_value : 32;
  uint64_t src_nstride : 32;
  uint64_t src_cstride : 32;
  uint64_t src_hstride : 32;
  uint64_t src_wstride : 32;
  uint64_t dst_nstride : 32;
  uint64_t dst_cstride : 32;
  uint64_t dst_hstride : 32;
  uint64_t dst_wstride : 32;
  uint64_t src_nsize : 16;
  uint64_t src_csize : 16;
  uint64_t src_hsize : 16;
  uint64_t src_wsize : 16;
  uint64_t dst_nsize : 16;
  uint64_t dst_csize : 16;
  uint64_t dst_hsize : 16;
  uint64_t dst_wsize : 16;
  uint64_t src_start_addr_l32 : 32;
  uint64_t src_start_addr_h13 : 13;
  uint64_t reserved_2 : 19;
  uint64_t dst_start_addr_l32 : 32;
  uint64_t dst_start_addr_h13 : 13;
  uint64_t reserved_3 : 19;
  uint64_t Reserved_0 : 32;
  uint64_t Reserved_1 : 32;
  uint64_t localmem_mask_l32 : 32;
  uint64_t localmem_mask_h32 : 32;
  bool operator==(const DMACwTransposeRegDef &rhs) const { return memcmp(this, &rhs, sizeof(DMACwTransposeRegDef)); }
};

struct DMANonzeroRegDef {
  // 768bits
  uint64_t intr_en : 1;
  uint64_t stride_enable : 1;
  uint64_t nchw_copy : 1;
  uint64_t cmd_short : 1;
  uint64_t cache_en : 1;
  uint64_t cache_flush : 1;
  uint64_t reserved : 23;
  uint64_t Reserved : 3;
  uint64_t cmd_type : 5;
  uint64_t cmd_special_function : 3;
  uint64_t fill_constant_en : 1;
  uint64_t src_data_format : 4;
  uint64_t index_data_format : 4;
  uint64_t reserved_0 : 15;
  uint64_t cmd_id_dep : 17;
  uint64_t reserved_1 : 15;
  uint64_t constant_value : 32;
  uint64_t src_nstride : 32;
  uint64_t src_cstride : 32;
  uint64_t src_hstride : 32;
  uint64_t src_wstride : 32;
  uint64_t dst_nstride : 32;
  uint64_t dst_cstride : 32;
  uint64_t dst_hstride : 32;
  uint64_t dst_wstride : 32;
  uint64_t src_nsize : 16;
  uint64_t src_csize : 16;
  uint64_t src_hsize : 16;
  uint64_t src_wsize : 16;
  uint64_t dst_nsize : 16;
  uint64_t dst_csize : 16;
  uint64_t dst_hsize : 16;
  uint64_t dst_wsize : 16;
  uint64_t src_start_addr_l32 : 32;
  uint64_t src_start_addr_h13 : 13;
  uint64_t reserved_2 : 19;
  uint64_t dst_start_addr_l32 : 32;
  uint64_t dst_start_addr_h13 : 13;
  uint64_t reserved_3 : 19;
  uint64_t Reserved_0 : 32;
  uint64_t Reserved_1 : 32;
  uint64_t localmem_mask_l32 : 32;
  uint64_t localmem_mask_h32 : 32;
  bool operator==(const DMANonzeroRegDef &rhs) const { return memcmp(this, &rhs, sizeof(DMANonzeroRegDef)); }
};

struct ShortDMANonzeroRegDef {
  // 384bits
  uint64_t intr_en : 1;
  uint64_t stride_enable : 1;
  uint64_t nchw_copy : 1;
  uint64_t cmd_short : 1;
  uint64_t reserved : 1;
  uint64_t reserved_0 : 4;
  uint64_t reserved_1 : 20;
  uint64_t Reserved : 3;
  uint64_t cmd_type : 4;
  uint64_t cmd_special_function : 3;
  uint64_t fill_constant_en : 1;
  uint64_t src_data_format : 3;
  uint64_t index_data_format : 3;
  uint64_t reserved_2 : 18;
  uint64_t cmd_id_dep : 24;
  uint64_t reserved_3 : 8;
  uint64_t dst_nstride : 32;
  uint64_t src_nsize : 16;
  uint64_t src_csize : 16;
  uint64_t src_hsize : 16;
  uint64_t src_wsize : 16;
  uint64_t src_start_addr_l32 : 32;
  uint64_t src_start_addr_h8 : 8;
  uint64_t reserved_4 : 24;
  uint64_t dst_start_addr_l32 : 32;
  uint64_t dst_start_addr_h8 : 8;
  uint64_t reserved_5 : 24;
  uint64_t reserved_6 : 32;
  uint64_t reserved_7 : 32;
  bool operator==(const ShortDMANonzeroRegDef &rhs) const { return memcmp(this, &rhs, sizeof(ShortDMANonzeroRegDef)); }
};

struct ShortDMASysRegDef {
  // 128bits
  uint64_t intr_en : 1;
  uint64_t stride_enable : 1;
  uint64_t nchw_copy : 1;
  uint64_t cmd_short : 1;
  uint64_t cache_en : 1;
  uint64_t cache_flush : 1;
  uint64_t reserved : 23;
  uint64_t Reserved : 3;
  uint64_t cmd_type : 5;
  uint64_t cmd_special_function : 3;
  uint64_t fill_constant_en : 1;
  uint64_t src_data_format : 4;
  uint64_t reserved_0 : 19;
  uint64_t cmd_id_dep : 17;
  uint64_t reserved_1 : 7;
  uint64_t index : 8;
  uint64_t constant_value : 32;
  bool operator==(const ShortDMASysRegDef &rhs) const { return memcmp(this, &rhs, sizeof(ShortDMASysRegDef)); }
};

struct DMAGatherRegDef {
  // 768bits
  uint64_t intr_en : 1;
  uint64_t stride_enable : 1;
  uint64_t nchw_copy : 1;
  uint64_t cmd_short : 1;
  uint64_t cache_en : 1;
  uint64_t cache_flush : 1;
  uint64_t reserved : 23;
  uint64_t Reserved : 3;
  uint64_t cmd_type : 5;
  uint64_t cmd_special_function : 3;
  uint64_t fill_constant_en : 1;
  uint64_t src_data_format : 4;
  uint64_t reserved_0 : 19;
  uint64_t cmd_id_dep : 17;
  uint64_t reserved_1 : 15;
  uint64_t constant_value : 32;
  uint64_t src_cstride : 32;
  uint64_t src_hstride : 32;
  uint64_t dst_cstride : 32;
  uint64_t dst_hstride : 32;
  uint64_t index_cstride : 32;
  uint64_t index_hstride : 32;
  uint64_t reserved_2 : 16;
  uint64_t src_csize : 16;
  uint64_t src_hsize : 32;
  uint64_t src_wsize : 16;
  uint64_t dst_csize : 16;
  uint64_t dst_hsize : 32;
  uint64_t dst_wsize : 16;
  uint64_t index_csize : 16;
  uint64_t index_hsize : 32;
  uint64_t src_start_addr_l32 : 32;
  uint64_t src_start_addr_h13 : 13;
  uint64_t reserved_3 : 19;
  uint64_t dst_start_addr_l32 : 32;
  uint64_t dst_start_addr_h13 : 13;
  uint64_t reserved_4 : 19;
  uint64_t index_start_addr_l32 : 32;
  uint64_t index_start_addr_h13 : 13;
  uint64_t reserve : 19;
  uint64_t localmem_mask_l32 : 32;
  uint64_t localmem_mask_h32 : 32;
  bool operator==(const DMAGatherRegDef &rhs) const { return memcmp(this, &rhs, sizeof(DMAGatherRegDef)); }
};

struct DMAScatterRegDef {
  // 768bits
  uint64_t intr_en : 1;
  uint64_t stride_enable : 1;
  uint64_t nchw_copy : 1;
  uint64_t cmd_short : 1;
  uint64_t cache_en : 1;
  uint64_t cache_flush : 1;
  uint64_t reserved : 23;
  uint64_t Reserved : 3;
  uint64_t cmd_type : 5;
  uint64_t cmd_special_function : 3;
  uint64_t fill_constant_en : 1;
  uint64_t src_data_format : 4;
  uint64_t reserved_0 : 19;
  uint64_t cmd_id_dep : 17;
  uint64_t reserved_1 : 15;
  uint64_t constant_value : 32;
  uint64_t src_cstride : 32;
  uint64_t src_hstride : 32;
  uint64_t dst_cstride : 32;
  uint64_t dst_hstride : 32;
  uint64_t index_cstride : 32;
  uint64_t index_hstride : 32;
  uint64_t reserved_2 : 16;
  uint64_t src_csize : 16;
  uint64_t src_hsize : 32;
  uint64_t src_wsize : 16;
  uint64_t dst_csize : 16;
  uint64_t dst_hsize : 32;
  uint64_t dst_wsize : 16;
  uint64_t index_csize : 16;
  uint64_t index_hsize : 32;
  uint64_t src_start_addr_l32 : 32;
  uint64_t src_start_addr_h8 : 13;
  uint64_t reserved_3 : 19;
  uint64_t dst_start_addr_l32 : 32;
  uint64_t dst_start_addr_h8 : 13;
  uint64_t reserved_4 : 19;
  uint64_t index_start_addr_l32 : 32;
  uint64_t index_start_addr_h8 : 13;
  uint64_t reserve : 19;
  uint64_t localmem_mask_l32 : 32;
  uint64_t localmem_mask_h32 : 32;
  bool operator==(const DMAScatterRegDef &rhs) const { return memcmp(this, &rhs, sizeof(DMAScatterRegDef)); }
};

struct DMAReverseRegDef {
  // 768bits
  uint64_t intr_en : 1;
  uint64_t stride_enable : 1;
  uint64_t nchw_copy : 1;
  uint64_t cmd_short : 1;
  uint64_t cache_en : 1;
  uint64_t cache_flush : 1;
  uint64_t reserved : 23;
  uint64_t Reserved : 3;
  uint64_t cmd_type : 5;
  uint64_t cmd_special_function : 3;
  uint64_t fill_constant_en : 1;
  uint64_t src_data_format : 4;
  uint64_t reserved_0 : 19;
  uint64_t cmd_id_dep : 17;
  uint64_t reserved_1 : 15;
  uint64_t constant_value : 32;
  uint64_t src_nstride : 32;
  uint64_t src_cstride : 32;
  uint64_t src_hstride : 32;
  uint64_t src_wstride : 32;
  uint64_t dst_nstride : 32;
  uint64_t dst_cstride : 32;
  uint64_t dst_hstride : 32;
  uint64_t dst_wstride : 32;
  uint64_t src_nsize : 16;
  uint64_t src_csize : 16;
  uint64_t src_hsize : 16;
  uint64_t src_wsize : 16;
  uint64_t dst_nsize : 16;
  uint64_t dst_csize : 16;
  uint64_t dst_hsize : 16;
  uint64_t dst_wsize : 16;
  uint64_t src_start_addr_l32 : 32;
  uint64_t src_start_addr_h13 : 13;
  uint64_t reserved_2 : 19;
  uint64_t dst_start_addr_l32 : 32;
  uint64_t dst_start_addr_h13 : 13;
  uint64_t reserved_3 : 19;
  uint64_t Reserved_0 : 32;
  uint64_t Reserved_1 : 32;
  uint64_t localmem_mask_l32 : 32;
  uint64_t localmem_mask_h32 : 32;
  bool operator==(const DMAReverseRegDef &rhs) const { return memcmp(this, &rhs, sizeof(DMAReverseRegDef)); }
};

struct DMACompressRegDef {
  // 768bits
  uint64_t intr_en : 1;
  uint64_t stride_enable : 1;
  uint64_t nchw_copy : 1;
  uint64_t cmd_short : 1;
  uint64_t cache_en : 1;
  uint64_t cache_flush : 1;
  uint64_t reserved : 23;
  uint64_t Reserved : 3;
  uint64_t cmd_type : 5;
  uint64_t cmd_special_function : 3;
  uint64_t fill_constant_en : 1;
  uint64_t src_data_format : 4;
  uint64_t reserved_0 : 19;
  uint64_t cmd_id_dep : 17;
  uint64_t reserved_1 : 15;
  uint64_t constant_value : 32;
  uint64_t src_nstride : 32;
  uint64_t src_cstride : 32;
  uint64_t src_hstride : 32;
  uint64_t racu_nstride : 32;
  uint64_t racu_lanecstride : 32;
  uint64_t racu_hstride : 32;
  uint64_t meta_nstride : 32;
  uint64_t meta_lanecstride : 32;
  uint64_t src_nsize : 16;
  uint64_t src_csize : 16;
  uint64_t src_hsize : 16;
  uint64_t src_wsize : 16;
  uint64_t meta_hstride : 32;
  uint64_t bias0 : 8;
  uint64_t bias1 : 8;
  uint64_t is_sign : 1;
  uint64_t zguard : 1;
  uint64_t reserved_2 : 14;
  uint64_t src_start_addr_l32 : 32;
  uint64_t src_start_addr_h13 : 13;
  uint64_t reserved_3 : 19;
  uint64_t racu_start_addr_l32 : 32;
  uint64_t racu_start_addr_h13 : 13;
  uint64_t reserved_4 : 19;
  uint64_t meta_start_addr_l32 : 32;
  uint64_t meta_start_addr_h13 : 13;
  uint64_t reserved_5 : 19;
  uint64_t localmem_mask_l32 : 32;
  uint64_t localmem_mask_h32 : 32;
  bool operator==(const DMACompressRegDef &rhs) const { return memcmp(this, &rhs, sizeof(DMACompressRegDef)); }
};

struct DMADecompressRegDef {
  // 768bits
  uint64_t intr_en : 1;
  uint64_t stride_enable : 1;
  uint64_t nchw_copy : 1;
  uint64_t cmd_short : 1;
  uint64_t cache_en : 1;
  uint64_t cache_flush : 1;
  uint64_t reserved : 23;
  uint64_t Reserved : 3;
  uint64_t cmd_type : 5;
  uint64_t cmd_special_function : 3;
  uint64_t fill_constant_en : 1;
  uint64_t src_data_format : 4;
  uint64_t reserved_0 : 19;
  uint64_t cmd_id_dep : 17;
  uint64_t reserved_1 : 15;
  uint64_t constant_value : 32;
  uint64_t racu_nstride : 32;
  uint64_t racu_lanecstride : 32;
  uint64_t racu_hstride : 32;
  uint64_t dst_nstride : 32;
  uint64_t dst_cstride : 32;
  uint64_t dst_hstride : 32;
  uint64_t meta_nstride : 32;
  uint64_t meta_lanecstride : 32;
  uint64_t src_nsize : 16;
  uint64_t src_csize : 16;
  uint64_t src_hsize : 16;
  uint64_t src_wsize : 16;
  uint64_t meta_hstride : 32;
  uint64_t bias0 : 8;
  uint64_t bias1 : 8;
  uint64_t is_sign : 1;
  uint64_t zguard : 1;
  uint64_t reserved_2 : 14;
  uint64_t racu_start_addr_l32 : 32;
  uint64_t racu_start_addr_h13 : 13;
  uint64_t reserved_3 : 19;
  uint64_t dst_start_addr_l32 : 32;
  uint64_t dst_start_addr_h13 : 13;
  uint64_t reserved_4 : 19;
  uint64_t meta_start_addr_l32 : 32;
  uint64_t meta_start_addr_h13 : 13;
  uint64_t reserved_5 : 19;
  uint64_t localmem_mask_l32 : 32;
  uint64_t localmem_mask_h32 : 32;
  bool operator==(const DMADecompressRegDef &rhs) const { return memcmp(this, &rhs, sizeof(DMADecompressRegDef)); }
};

struct DMALossyCompressRegDef {
  // 768bits
  uint64_t intr_en : 1;
  uint64_t stride_enable : 1;
  uint64_t nchw_copy : 1;
  uint64_t cmd_short : 1;
  uint64_t cache_en : 1;
  uint64_t cache_flush : 1;
  uint64_t reserved : 23;
  uint64_t Reserved : 3;
  uint64_t cmd_type : 5;
  uint64_t cmd_special_function : 3;
  uint64_t fill_constant_en : 1;
  uint64_t reserved_0 : 3;
  uint64_t reserved_1 : 20;
  uint64_t cmd_id_dep : 17;
  uint64_t reserved_2 : 15;
  uint64_t constant_value : 32;
  uint64_t src_nstride : 32;
  uint64_t src_cstride : 32;
  uint64_t src_hstride : 32;
  uint64_t dst_nstride : 32;
  uint64_t dst_cstride : 32;
  uint64_t dst_hstride : 32;
  uint64_t reserved_3 : 32;
  uint64_t reserved_4 : 32;
  uint64_t src_nsize : 16;
  uint64_t src_csize : 16;
  uint64_t src_hsize : 16;
  uint64_t src_wsize : 16;
  uint64_t reserved_5 : 32;
  uint64_t reserved_6 : 8;
  uint64_t reserved_7 : 8;
  uint64_t reserved_8 : 1;
  uint64_t reserved_9 : 1;
  uint64_t reserved_10 : 14;
  uint64_t src_start_addr_l32 : 32;
  uint64_t src_start_addr_h13 : 13;
  uint64_t reserved_11 : 19;
  uint64_t dst_start_addr_l32 : 32;
  uint64_t dst_start_addr_h13 : 13;
  uint64_t reserved_12 : 19;
  uint64_t all_reduce_code : 16;
  uint64_t reserved_13 : 16;
  uint64_t reserved_14 : 32;
  uint64_t reserved_15 : 32;
  uint64_t reserved_16 : 32;
  bool operator==(const DMALossyCompressRegDef &rhs) const { return memcmp(this, &rhs, sizeof(DMALossyCompressRegDef)); }
};

struct DMALossyDecompressRegDef {
  // 768bits
  uint64_t intr_en : 1;
  uint64_t stride_enable : 1;
  uint64_t nchw_copy : 1;
  uint64_t cmd_short : 1;
  uint64_t cache_en : 1;
  uint64_t cache_flush : 1;
  uint64_t reserved : 23;
  uint64_t Reserved : 3;
  uint64_t cmd_type : 5;
  uint64_t cmd_special_function : 3;
  uint64_t fill_constant_en : 1;
  uint64_t reserved_0 : 3;
  uint64_t reserved_1 : 20;
  uint64_t cmd_id_dep : 17;
  uint64_t reserved_2 : 15;
  uint64_t constant_value : 32;
  uint64_t src_nstride : 32;
  uint64_t src_cstride : 32;
  uint64_t src_hstride : 32;
  uint64_t dst_nstride : 32;
  uint64_t dst_cstride : 32;
  uint64_t dst_hstride : 32;
  uint64_t reserved_3 : 32;
  uint64_t reserved_4 : 32;
  uint64_t src_nsize : 16;
  uint64_t src_csize : 16;
  uint64_t src_hsize : 16;
  uint64_t src_wsize : 16;
  uint64_t reserved_5 : 32;
  uint64_t reserved_6 : 8;
  uint64_t reserved_7 : 8;
  uint64_t reserved_8 : 1;
  uint64_t reserved_9 : 1;
  uint64_t reserved_10 : 14;
  uint64_t src_start_addr_l32 : 32;
  uint64_t src_start_addr_h13 : 13;
  uint64_t reserved_11 : 19;
  uint64_t dst_start_addr_l32 : 32;
  uint64_t dst_start_addr_h13 : 13;
  uint64_t reserved_12 : 19;
  uint64_t all_reduce_code : 16;
  uint64_t reserved_13 : 16;
  uint64_t reserved_14 : 32;
  uint64_t localmem_mask_l32 : 32;
  uint64_t localmem_mask_h32 : 32;
  bool operator==(const DMALossyDecompressRegDef &rhs) const { return memcmp(this, &rhs, sizeof(DMALossyDecompressRegDef)); }
};

struct DMARandmaskRegDef {
  // 768bits
  uint64_t intr_en : 1;
  uint64_t stride_enable : 1;
  uint64_t nchw_copy : 1;
  uint64_t cmd_long : 1;
  uint64_t cache_en : 1;
  uint64_t cache_flush : 1;
  uint64_t reserved : 23;
  uint64_t Reserved : 3;
  uint64_t cmd_type : 5;
  uint64_t cmd_special_function : 3;
  uint64_t fill_constant_en : 1;
  uint64_t src_data_format : 4;
  uint64_t inter_state : 1;
  uint64_t reserved_0 : 18;
  uint64_t cmd_id_dep : 17;
  uint64_t reserved_1 : 15;
  uint64_t constant_value : 32;
  uint64_t src_nstride : 32;
  uint64_t src_cstride : 32;
  uint64_t src_hstride : 32;
  uint64_t src_wstride : 32;
  uint64_t dst_nstride : 32;
  uint64_t dst_cstride : 32;
  uint64_t dst_hstride : 32;
  uint64_t dst_wstride : 32;
  uint64_t src_nsize : 16;
  uint64_t src_csize : 16;
  uint64_t src_hsize : 16;
  uint64_t src_wsize : 16;
  uint64_t dst_nsize : 16;
  uint64_t dst_csize : 16;
  uint64_t dst_hsize : 16;
  uint64_t dst_wsize : 16;
  uint64_t src_start_addr_l32 : 32;
  uint64_t src_start_addr_h13 : 13;
  uint64_t reserved_2 : 19;
  uint64_t dst_start_addr_l32 : 32;
  uint64_t dst_start_addr_h13 : 13;
  uint64_t reserved_3 : 19;
  uint64_t Reserved_0 : 32;
  uint64_t Reserved_1 : 32;
  uint64_t localmem_mask_l32 : 32;
  uint64_t localmem_mask_h32 : 32;
  bool operator==(const DMARandmaskRegDef &rhs) const { return memcmp(this, &rhs, sizeof(DMARandmaskRegDef)); }
};

struct DMATansferRegDef {
  // 768bits
  uint64_t intr_en : 1;
  uint64_t stride_enable : 1;
  uint64_t nchw_copy : 1;
  uint64_t cmd_short : 1;
  uint64_t cache_en : 1;
  uint64_t cache_flush : 1;
  uint64_t reserved : 23;
  uint64_t Reserved : 3;
  uint64_t cmd_type : 5;
  uint64_t cmd_special_function : 3;
  uint64_t fill_constant_en : 1;
  uint64_t src_data_format : 3;
  uint64_t reserved_0 : 20;
  uint64_t cmd_id_dep : 17;
  uint64_t reserved_1 : 15;
  uint64_t constant_value : 32;
  uint64_t src_nstride : 32;
  uint64_t src_cstride : 32;
  uint64_t src_hstride : 32;
  uint64_t src_wstride : 32;
  uint64_t dst_nstride : 32;
  uint64_t dst_cstride : 32;
  uint64_t dst_hstride : 32;
  uint64_t dst_wstride : 32;
  uint64_t src_nsize : 16;
  uint64_t src_csize : 16;
  uint64_t src_hsize : 16;
  uint64_t src_wsize : 16;
  uint64_t dst_nsize : 16;
  uint64_t dst_csize : 16;
  uint64_t dst_hsize : 16;
  uint64_t dst_wsize : 16;
  uint64_t src_start_addr_l32 : 32;
  uint64_t src_start_addr_h13 : 13;
  uint64_t reserved_2 : 19;
  uint64_t dst_start_addr_l32 : 32;
  uint64_t dst_start_addr_h13 : 13;
  uint64_t reserved_3 : 19;
  uint64_t Reserved_0 : 32;
  uint64_t Reserved_1 : 32;
  uint64_t localmem_mask_l32 : 32;
  uint64_t localmem_mask_h32 : 32;
  bool operator==(const DMATansferRegDef &rhs) const { return memcmp(this, &rhs, sizeof(DMATansferRegDef)); }
};
